=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class ChangeSubscription
    # When to perform the subscription change. Either `immediate` or `renewal`.
    attr_accessor :timing

    # The handle of the plan to change to
    attr_accessor :plan

    # Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.
    attr_accessor :amount

    # Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.
    attr_accessor :quantity

    # In the case of immediate change and change not affecting billing period, how to bill for the remaining partial period. Either `prorated`, `full`, `zero_amount` or `none`. The default is `prorated`.
    attr_accessor :billing

    # Whether the optional amount is including VAT. Defaults to true.
    attr_accessor :amount_incl_vat

    # In the case of immediate change, optional method for compensation of partial period, either `full_refund`, `prorated_refund`, `full_credit`, `prorated_credit` or `none`. Default is `prorated_refund`
    attr_accessor :compensation_method

    # Optional argument to override plan setting on how to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amount, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.
    attr_accessor :partial_period_handling

    # If the subscription change results in a new period due to change to a plan with different scheduling, an optional date and time from which the subscription is eligible to schedule first invoice can be given. See subscription create and subscription reactivate argument `start_date`.
    attr_accessor :start_date

    # If there are pending changes at renewal for the subscription they can be cancelled using this argument and timing=renewal
    attr_accessor :cancel_change

    # Add-ons to attach to subscription. The same add-on can only be attached to subscription once unless unique handles are supplied for the subscription add-on.
    attr_accessor :add_ons

    # Subscription add-ons to remove from subscription by subscription add-on handle
    attr_accessor :remove_add_ons

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'timing' => :'timing',
        :'plan' => :'plan',
        :'amount' => :'amount',
        :'quantity' => :'quantity',
        :'billing' => :'billing',
        :'amount_incl_vat' => :'amount_incl_vat',
        :'compensation_method' => :'compensation_method',
        :'partial_period_handling' => :'partial_period_handling',
        :'start_date' => :'start_date',
        :'cancel_change' => :'cancel_change',
        :'add_ons' => :'add_ons',
        :'remove_add_ons' => :'remove_add_ons'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'timing' => :'String',
        :'plan' => :'String',
        :'amount' => :'Integer',
        :'quantity' => :'Integer',
        :'billing' => :'String',
        :'amount_incl_vat' => :'BOOLEAN',
        :'compensation_method' => :'String',
        :'partial_period_handling' => :'String',
        :'start_date' => :'String',
        :'cancel_change' => :'BOOLEAN',
        :'add_ons' => :'Array<CreateSubscriptionAddOn>',
        :'remove_add_ons' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'timing')
        self.timing = attributes[:'timing']
      end

      if attributes.has_key?(:'plan')
        self.plan = attributes[:'plan']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'billing')
        self.billing = attributes[:'billing']
      end

      if attributes.has_key?(:'amount_incl_vat')
        self.amount_incl_vat = attributes[:'amount_incl_vat']
      end

      if attributes.has_key?(:'compensation_method')
        self.compensation_method = attributes[:'compensation_method']
      end

      if attributes.has_key?(:'partial_period_handling')
        self.partial_period_handling = attributes[:'partial_period_handling']
      end

      if attributes.has_key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.has_key?(:'cancel_change')
        self.cancel_change = attributes[:'cancel_change']
      end

      if attributes.has_key?(:'add_ons')
        if (value = attributes[:'add_ons']).is_a?(Array)
          self.add_ons = value
        end
      end

      if attributes.has_key?(:'remove_add_ons')
        if (value = attributes[:'remove_add_ons']).is_a?(Array)
          self.remove_add_ons = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @timing.nil?
        invalid_properties.push("invalid value for 'timing', timing cannot be nil.")
      end

      if !@amount.nil? && @amount < 0
        invalid_properties.push("invalid value for 'amount', must be greater than or equal to 0.")
      end

      if !@quantity.nil? && @quantity < 1
        invalid_properties.push("invalid value for 'quantity', must be greater than or equal to 1.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @timing.nil?
      timing_validator = EnumAttributeValidator.new('String', ["immediate", "renewal"])
      return false unless timing_validator.valid?(@timing)
      return false if !@amount.nil? && @amount < 0
      return false if !@quantity.nil? && @quantity < 1
      billing_validator = EnumAttributeValidator.new('String', ["prorated", "full", "zero_amount", "none"])
      return false unless billing_validator.valid?(@billing)
      compensation_method_validator = EnumAttributeValidator.new('String', ["full_refund", "prorated_refund", "full_credit", "prorated_credit", "none"])
      return false unless compensation_method_validator.valid?(@compensation_method)
      partial_period_handling_validator = EnumAttributeValidator.new('String', ["bill_full", "bill_prorated", "bill_zero_amount", "no_bill"])
      return false unless partial_period_handling_validator.valid?(@partial_period_handling)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] timing Object to be assigned
    def timing=(timing)
      validator = EnumAttributeValidator.new('String', ["immediate", "renewal"])
      unless validator.valid?(timing)
        fail ArgumentError, "invalid value for 'timing', must be one of #{validator.allowable_values}."
      end
      @timing = timing
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)

      if !amount.nil? && amount < 0
        fail ArgumentError, "invalid value for 'amount', must be greater than or equal to 0."
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity Value to be assigned
    def quantity=(quantity)

      if !quantity.nil? && quantity < 1
        fail ArgumentError, "invalid value for 'quantity', must be greater than or equal to 1."
      end

      @quantity = quantity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing Object to be assigned
    def billing=(billing)
      validator = EnumAttributeValidator.new('String', ["prorated", "full", "zero_amount", "none"])
      unless validator.valid?(billing)
        fail ArgumentError, "invalid value for 'billing', must be one of #{validator.allowable_values}."
      end
      @billing = billing
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] compensation_method Object to be assigned
    def compensation_method=(compensation_method)
      validator = EnumAttributeValidator.new('String', ["full_refund", "prorated_refund", "full_credit", "prorated_credit", "none"])
      unless validator.valid?(compensation_method)
        fail ArgumentError, "invalid value for 'compensation_method', must be one of #{validator.allowable_values}."
      end
      @compensation_method = compensation_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] partial_period_handling Object to be assigned
    def partial_period_handling=(partial_period_handling)
      validator = EnumAttributeValidator.new('String', ["bill_full", "bill_prorated", "bill_zero_amount", "no_bill"])
      unless validator.valid?(partial_period_handling)
        fail ArgumentError, "invalid value for 'partial_period_handling', must be one of #{validator.allowable_values}."
      end
      @partial_period_handling = partial_period_handling
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          timing == o.timing &&
          plan == o.plan &&
          amount == o.amount &&
          quantity == o.quantity &&
          billing == o.billing &&
          amount_incl_vat == o.amount_incl_vat &&
          compensation_method == o.compensation_method &&
          partial_period_handling == o.partial_period_handling &&
          start_date == o.start_date &&
          cancel_change == o.cancel_change &&
          add_ons == o.add_ons &&
          remove_add_ons == o.remove_add_ons
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [timing, plan, amount, quantity, billing, amount_incl_vat, compensation_method, partial_period_handling, start_date, cancel_change, add_ons, remove_add_ons].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
