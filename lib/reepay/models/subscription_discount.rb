=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class SubscriptionDiscount
    # Per subscription unique handle for the subscription discount.
    attr_accessor :handle

    # Discount for subscription discount
    attr_accessor :discount

    # Discount state `active` or `disabled`.
    attr_accessor :state

    # Coupon reference if this discount was released by a coupon code
    attr_accessor :coupon

    # Date when the discount was deleted if deleted. In ISO-8601 extended offset date-time format.
    attr_accessor :deleted

    # Date when the discount was created. In ISO-8601 extended offset date-time format.
    attr_accessor :created

    # Name of discount. Will be used as order line text.
    attr_accessor :name

    # Optional description of discount
    attr_accessor :description

    # Fixed amount discount deducted from order line amounts including VAT
    attr_accessor :amount

    # Percentage discount applied to each applicable order line
    attr_accessor :percentage

    # Number of invoices this subscription discount has been applied to
    attr_accessor :count

    # List of invoices this subscription discount has been applied to
    attr_accessor :invoices

    # Which order lines the discount is applicable to: `all`, `setup_fee`, `plan`, `additional_cost`, `add_on` and `ondemand`
    attr_accessor :apply_to

    # Apply discount to a fixed number of invoices
    attr_accessor :fixed_count

    # Time unit use for fixed valid period
    attr_accessor :fixed_period_unit

    # Fixed period length e.g. 12 months or 14 days
    attr_accessor :fixed_period

    # Whether fixed usage for subscription discount has been reached
    attr_accessor :fixed_usage_reached

    # Whether fixed period for subscription discount has been passed
    attr_accessor :fixed_period_passed

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'handle' => :'handle',
        :'discount' => :'discount',
        :'state' => :'state',
        :'coupon' => :'coupon',
        :'deleted' => :'deleted',
        :'created' => :'created',
        :'name' => :'name',
        :'description' => :'description',
        :'amount' => :'amount',
        :'percentage' => :'percentage',
        :'count' => :'count',
        :'invoices' => :'invoices',
        :'apply_to' => :'apply_to',
        :'fixed_count' => :'fixed_count',
        :'fixed_period_unit' => :'fixed_period_unit',
        :'fixed_period' => :'fixed_period',
        :'fixed_usage_reached' => :'fixed_usage_reached',
        :'fixed_period_passed' => :'fixed_period_passed'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'handle' => :'String',
        :'discount' => :'String',
        :'state' => :'String',
        :'coupon' => :'String',
        :'deleted' => :'DateTime',
        :'created' => :'DateTime',
        :'name' => :'String',
        :'description' => :'String',
        :'amount' => :'Integer',
        :'percentage' => :'Integer',
        :'count' => :'Integer',
        :'invoices' => :'Array<String>',
        :'apply_to' => :'Array<String>',
        :'fixed_count' => :'Integer',
        :'fixed_period_unit' => :'String',
        :'fixed_period' => :'Integer',
        :'fixed_usage_reached' => :'BOOLEAN',
        :'fixed_period_passed' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'handle')
        self.handle = attributes[:'handle']
      end

      if attributes.has_key?(:'discount')
        self.discount = attributes[:'discount']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'coupon')
        self.coupon = attributes[:'coupon']
      end

      if attributes.has_key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'percentage')
        self.percentage = attributes[:'percentage']
      end

      if attributes.has_key?(:'count')
        self.count = attributes[:'count']
      end

      if attributes.has_key?(:'invoices')
        if (value = attributes[:'invoices']).is_a?(Array)
          self.invoices = value
        end
      end

      if attributes.has_key?(:'apply_to')
        if (value = attributes[:'apply_to']).is_a?(Array)
          self.apply_to = value
        end
      end

      if attributes.has_key?(:'fixed_count')
        self.fixed_count = attributes[:'fixed_count']
      end

      if attributes.has_key?(:'fixed_period_unit')
        self.fixed_period_unit = attributes[:'fixed_period_unit']
      end

      if attributes.has_key?(:'fixed_period')
        self.fixed_period = attributes[:'fixed_period']
      end

      if attributes.has_key?(:'fixed_usage_reached')
        self.fixed_usage_reached = attributes[:'fixed_usage_reached']
      end

      if attributes.has_key?(:'fixed_period_passed')
        self.fixed_period_passed = attributes[:'fixed_period_passed']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @handle.nil?
        invalid_properties.push("invalid value for 'handle', handle cannot be nil.")
      end

      if @discount.nil?
        invalid_properties.push("invalid value for 'discount', discount cannot be nil.")
      end

      if @state.nil?
        invalid_properties.push("invalid value for 'state', state cannot be nil.")
      end

      if @created.nil?
        invalid_properties.push("invalid value for 'created', created cannot be nil.")
      end

      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if !@amount.nil? && @amount < 1
        invalid_properties.push("invalid value for 'amount', must be greater than or equal to 1.")
      end

      if !@percentage.nil? && @percentage > 100
        invalid_properties.push("invalid value for 'percentage', must be smaller than or equal to 100.")
      end

      if !@percentage.nil? && @percentage < 1
        invalid_properties.push("invalid value for 'percentage', must be greater than or equal to 1.")
      end

      if @count.nil?
        invalid_properties.push("invalid value for 'count', count cannot be nil.")
      end

      if @invoices.nil?
        invalid_properties.push("invalid value for 'invoices', invoices cannot be nil.")
      end

      if @apply_to.nil?
        invalid_properties.push("invalid value for 'apply_to', apply_to cannot be nil.")
      end

      if !@fixed_count.nil? && @fixed_count < 1
        invalid_properties.push("invalid value for 'fixed_count', must be greater than or equal to 1.")
      end

      if !@fixed_period.nil? && @fixed_period < 1
        invalid_properties.push("invalid value for 'fixed_period', must be greater than or equal to 1.")
      end

      if @fixed_usage_reached.nil?
        invalid_properties.push("invalid value for 'fixed_usage_reached', fixed_usage_reached cannot be nil.")
      end

      if @fixed_period_passed.nil?
        invalid_properties.push("invalid value for 'fixed_period_passed', fixed_period_passed cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @handle.nil?
      return false if @discount.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["active", "disabled"])
      return false unless state_validator.valid?(@state)
      return false if @created.nil?
      return false if @name.nil?
      return false if !@amount.nil? && @amount < 1
      return false if !@percentage.nil? && @percentage > 100
      return false if !@percentage.nil? && @percentage < 1
      return false if @count.nil?
      return false if @invoices.nil?
      return false if @apply_to.nil?
      return false if !@fixed_count.nil? && @fixed_count < 1
      fixed_period_unit_validator = EnumAttributeValidator.new('String', ["months", "days"])
      return false unless fixed_period_unit_validator.valid?(@fixed_period_unit)
      return false if !@fixed_period.nil? && @fixed_period < 1
      return false if @fixed_usage_reached.nil?
      return false if @fixed_period_passed.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["active", "disabled"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for 'state', must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)

      if !amount.nil? && amount < 1
        fail ArgumentError, "invalid value for 'amount', must be greater than or equal to 1."
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] percentage Value to be assigned
    def percentage=(percentage)

      if !percentage.nil? && percentage > 100
        fail ArgumentError, "invalid value for 'percentage', must be smaller than or equal to 100."
      end

      if !percentage.nil? && percentage < 1
        fail ArgumentError, "invalid value for 'percentage', must be greater than or equal to 1."
      end

      @percentage = percentage
    end

    # Custom attribute writer method with validation
    # @param [Object] fixed_count Value to be assigned
    def fixed_count=(fixed_count)

      if !fixed_count.nil? && fixed_count < 1
        fail ArgumentError, "invalid value for 'fixed_count', must be greater than or equal to 1."
      end

      @fixed_count = fixed_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fixed_period_unit Object to be assigned
    def fixed_period_unit=(fixed_period_unit)
      validator = EnumAttributeValidator.new('String', ["months", "days"])
      unless validator.valid?(fixed_period_unit)
        fail ArgumentError, "invalid value for 'fixed_period_unit', must be one of #{validator.allowable_values}."
      end
      @fixed_period_unit = fixed_period_unit
    end

    # Custom attribute writer method with validation
    # @param [Object] fixed_period Value to be assigned
    def fixed_period=(fixed_period)

      if !fixed_period.nil? && fixed_period < 1
        fail ArgumentError, "invalid value for 'fixed_period', must be greater than or equal to 1."
      end

      @fixed_period = fixed_period
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          handle == o.handle &&
          discount == o.discount &&
          state == o.state &&
          coupon == o.coupon &&
          deleted == o.deleted &&
          created == o.created &&
          name == o.name &&
          description == o.description &&
          amount == o.amount &&
          percentage == o.percentage &&
          count == o.count &&
          invoices == o.invoices &&
          apply_to == o.apply_to &&
          fixed_count == o.fixed_count &&
          fixed_period_unit == o.fixed_period_unit &&
          fixed_period == o.fixed_period &&
          fixed_usage_reached == o.fixed_usage_reached &&
          fixed_period_passed == o.fixed_period_passed
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [handle, discount, state, coupon, deleted, created, name, description, amount, percentage, count, invoices, apply_to, fixed_count, fixed_period_unit, fixed_period, fixed_usage_reached, fixed_period_passed].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
