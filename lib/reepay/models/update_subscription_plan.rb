=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class UpdateSubscriptionPlan
    # Name of the plan
    attr_accessor :name

    # Description of the plan
    attr_accessor :description

    # Optional vat for this plan. Account default is used if none given.
    attr_accessor :vat

    # Dunning plan handle
    attr_accessor :dunning_plan

    # Optional renewal reminder email settings. Number of days before next billing to send a reminder email.
    attr_accessor :renewal_reminder_email_days

    # Optional end of trial reminder email settings. Number of days before end of trial to send a reminder email.
    attr_accessor :trial_reminder_email_days

    # How to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.
    attr_accessor :partial_period_handling

    # Whether to add a zero amount order line to subscription invoices if plan amount is zero or the subscription overrides to zero amount. The default is to not include the line. If no other order lines are present the plan order line will be added.
    attr_accessor :include_zero_amount

    # Optional one-time setup fee billed with the first invoice or as a separate invoice depending on the setting `setup_fee_invoice`.
    attr_accessor :setup_fee

    # Optional invoice order text for the setup fee that
    attr_accessor :setup_fee_text

    # How the billing of the setup fee should be done. The options are: `first` - include setup fee as order line on the first scheduled invoice. `separate` - create a separate invoice for the setup fee, is appropriate if first invoice is not in conjunction with creation. `separate_conditional` - create a separate invoice for setup fee if the first invoice is not created in conjunction with the creation. Default is `first`.
    attr_accessor :setup_fee_handling

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'description' => :'description',
        :'vat' => :'vat',
        :'dunning_plan' => :'dunning_plan',
        :'renewal_reminder_email_days' => :'renewal_reminder_email_days',
        :'trial_reminder_email_days' => :'trial_reminder_email_days',
        :'partial_period_handling' => :'partial_period_handling',
        :'include_zero_amount' => :'include_zero_amount',
        :'setup_fee' => :'setup_fee',
        :'setup_fee_text' => :'setup_fee_text',
        :'setup_fee_handling' => :'setup_fee_handling'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'description' => :'String',
        :'vat' => :'Float',
        :'dunning_plan' => :'String',
        :'renewal_reminder_email_days' => :'Integer',
        :'trial_reminder_email_days' => :'Integer',
        :'partial_period_handling' => :'String',
        :'include_zero_amount' => :'BOOLEAN',
        :'setup_fee' => :'Integer',
        :'setup_fee_text' => :'String',
        :'setup_fee_handling' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'vat')
        self.vat = attributes[:'vat']
      end

      if attributes.has_key?(:'dunning_plan')
        self.dunning_plan = attributes[:'dunning_plan']
      end

      if attributes.has_key?(:'renewal_reminder_email_days')
        self.renewal_reminder_email_days = attributes[:'renewal_reminder_email_days']
      end

      if attributes.has_key?(:'trial_reminder_email_days')
        self.trial_reminder_email_days = attributes[:'trial_reminder_email_days']
      end

      if attributes.has_key?(:'partial_period_handling')
        self.partial_period_handling = attributes[:'partial_period_handling']
      end

      if attributes.has_key?(:'include_zero_amount')
        self.include_zero_amount = attributes[:'include_zero_amount']
      end

      if attributes.has_key?(:'setup_fee')
        self.setup_fee = attributes[:'setup_fee']
      end

      if attributes.has_key?(:'setup_fee_text')
        self.setup_fee_text = attributes[:'setup_fee_text']
      end

      if attributes.has_key?(:'setup_fee_handling')
        self.setup_fee_handling = attributes[:'setup_fee_handling']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if !@vat.nil? && @vat > 1
        invalid_properties.push("invalid value for 'vat', must be smaller than or equal to 1.")
      end

      if !@vat.nil? && @vat < 0
        invalid_properties.push("invalid value for 'vat', must be greater than or equal to 0.")
      end

      if !@renewal_reminder_email_days.nil? && @renewal_reminder_email_days < 1
        invalid_properties.push("invalid value for 'renewal_reminder_email_days', must be greater than or equal to 1.")
      end

      if !@trial_reminder_email_days.nil? && @trial_reminder_email_days < 1
        invalid_properties.push("invalid value for 'trial_reminder_email_days', must be greater than or equal to 1.")
      end

      if !@setup_fee.nil? && @setup_fee < 0
        invalid_properties.push("invalid value for 'setup_fee', must be greater than or equal to 0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if !@vat.nil? && @vat > 1
      return false if !@vat.nil? && @vat < 0
      return false if !@renewal_reminder_email_days.nil? && @renewal_reminder_email_days < 1
      return false if !@trial_reminder_email_days.nil? && @trial_reminder_email_days < 1
      partial_period_handling_validator = EnumAttributeValidator.new('String', ["bill_full", "bill_prorated", "bill_zero_amount", "no_bill"])
      return false unless partial_period_handling_validator.valid?(@partial_period_handling)
      return false if !@setup_fee.nil? && @setup_fee < 0
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] vat Value to be assigned
    def vat=(vat)

      if !vat.nil? && vat > 1
        fail ArgumentError, "invalid value for 'vat', must be smaller than or equal to 1."
      end

      if !vat.nil? && vat < 0
        fail ArgumentError, "invalid value for 'vat', must be greater than or equal to 0."
      end

      @vat = vat
    end

    # Custom attribute writer method with validation
    # @param [Object] renewal_reminder_email_days Value to be assigned
    def renewal_reminder_email_days=(renewal_reminder_email_days)

      if !renewal_reminder_email_days.nil? && renewal_reminder_email_days < 1
        fail ArgumentError, "invalid value for 'renewal_reminder_email_days', must be greater than or equal to 1."
      end

      @renewal_reminder_email_days = renewal_reminder_email_days
    end

    # Custom attribute writer method with validation
    # @param [Object] trial_reminder_email_days Value to be assigned
    def trial_reminder_email_days=(trial_reminder_email_days)

      if !trial_reminder_email_days.nil? && trial_reminder_email_days < 1
        fail ArgumentError, "invalid value for 'trial_reminder_email_days', must be greater than or equal to 1."
      end

      @trial_reminder_email_days = trial_reminder_email_days
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] partial_period_handling Object to be assigned
    def partial_period_handling=(partial_period_handling)
      validator = EnumAttributeValidator.new('String', ["bill_full", "bill_prorated", "bill_zero_amount", "no_bill"])
      unless validator.valid?(partial_period_handling)
        fail ArgumentError, "invalid value for 'partial_period_handling', must be one of #{validator.allowable_values}."
      end
      @partial_period_handling = partial_period_handling
    end

    # Custom attribute writer method with validation
    # @param [Object] setup_fee Value to be assigned
    def setup_fee=(setup_fee)

      if !setup_fee.nil? && setup_fee < 0
        fail ArgumentError, "invalid value for 'setup_fee', must be greater than or equal to 0."
      end

      @setup_fee = setup_fee
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          description == o.description &&
          vat == o.vat &&
          dunning_plan == o.dunning_plan &&
          renewal_reminder_email_days == o.renewal_reminder_email_days &&
          trial_reminder_email_days == o.trial_reminder_email_days &&
          partial_period_handling == o.partial_period_handling &&
          include_zero_amount == o.include_zero_amount &&
          setup_fee == o.setup_fee &&
          setup_fee_text == o.setup_fee_text &&
          setup_fee_handling == o.setup_fee_handling
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, description, vat, dunning_plan, renewal_reminder_email_days, trial_reminder_email_days, partial_period_handling, include_zero_amount, setup_fee, setup_fee_text, setup_fee_handling].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
