=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class CreateSubscriptionPlan
    # Name of the plan
    attr_accessor :name

    # Description of the plan
    attr_accessor :description

    # Optional vat for this plan. Account default is used if none given.
    attr_accessor :vat

    # Amount for the plan in the smallest unit for the account currency
    attr_accessor :amount

    # Optional default quantity of the subscription plan product for new subscriptions. Default is 1.
    attr_accessor :quantity

    # Subscriptions can either be prepaid where an amount is paid in advance, or the opposite. This setting only relates to handling of pause scenarios.
    attr_accessor :prepaid

    # Per account unique handle for the subscription plan. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
    attr_accessor :handle

    # Dunning plan handle
    attr_accessor :dunning_plan

    # Optional renewal reminder email settings. Number of days before next billing to send a reminder email.
    attr_accessor :renewal_reminder_email_days

    # Optional end of trial reminder email settings. Number of days before end of trial to send a reminder email.
    attr_accessor :trial_reminder_email_days

    # How to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.
    attr_accessor :partial_period_handling

    # Whether to add a zero amount order line to subscription invoices if plan amount is zero or the subscription overrides to zero amount. The default is to not include the line. If no other order lines are present the plan order line will be added.
    attr_accessor :include_zero_amount

    # Optional one-time setup fee billed with the first invoice or as a separate invoice depending on the setting `setup_fee_invoice`.
    attr_accessor :setup_fee

    # Optional invoice order text for the setup fee that
    attr_accessor :setup_fee_text

    # How the billing of the setup fee should be done. The options are: `first` - include setup fee as order line on the first scheduled invoice. `separate` - create a separate invoice for the setup fee, is appropriate if first invoice is not in conjunction with creation. `separate_conditional` - create a separate invoice for setup fee if the first invoice is not created in conjunction with the creation. Default is `first`.
    attr_accessor :setup_fee_handling

    # Whether the amount is including VAT. Default true.
    attr_accessor :amount_incl_vat

    # Fixed number of renewals for subscriptions using this plan. Equals the number of scheduled invoices.
    attr_accessor :fixed_count

    # Time unit use for fixed life time
    attr_accessor :fixed_life_time_unit

    # Fixed life time length for subscriptions using this plan. E.g. 12 months. Subscriptions will cancel after the fixed life time and expire when the active billing cycle ends.
    attr_accessor :fixed_life_time_length

    # Time unit for free trial period
    attr_accessor :trial_interval_unit

    # Free trial interval length. E.g. 1 month.
    attr_accessor :trial_interval_length

    # The length of intervals. E.g. every second month or every 14 days.
    attr_accessor :interval_length

    # Scheduling type, one of the following: `manual`, `daily`, `weekly_fixedday`, `month_startdate`, `month_fixedday`, `month_lastday`. See documentation for descriptions of the different types.
    attr_accessor :schedule_type

    # If a fixed day scheduling type is used a fixed day must be provided. For months the allowed value is 1-28 for weeks it is 1-7
    attr_accessor :schedule_fixed_day

    # For fixed month schedule types the base month can be used to control which months are eligible for start of first billing period. The eligible months are calculated as `base_month + k * interval_length` up to 12. E.g. to use quaterly billing in the months jan-apr-jul-oct, `base_month` 1 and `interval_length` 3 can be used. If not defined the first fixed day will be used as start of first billing period.
    attr_accessor :base_month

    # Optional number of notice periods for a cancel. The subscription will be cancelled for this number of full periods before expiring. Either from the cancellation date, or from the end of the the current period. See `notice_periods_after_current`. The default is to expire at the end of current period (0). A value of 1 (and `notice_periods_after_current` set to true) will for example result in a scenario where the subscription is cancelled until the end of current period, and then for the full subsequent period before expiring.
    attr_accessor :notice_periods

    # If notice periods is set, this option controls whether the number of full notice periods should start at the end of the current period, or run from cancellation date and result in a partial period with partial amount for the last period. The default is true. E.g. if set to false and `notice_periods = 1` then the subscription will be cancelled for exactly for one period from the cancellation time and a partial amount will be billed at the start of the next billing period.
    attr_accessor :notice_periods_after_current

    # Optional number of fixation periods. Fixation periods will guarantee that a subscription will have this number of paid full periods before expiring after a cancel. Default is to have no requirement (0).
    attr_accessor :fixation_periods

    # If fixation periods are defined, and the subscription can have a partial prorated first period, this parameter controls if the the last period should be full, or partial to give exactly `fixation_periods` paid periods. Default is false.
    attr_accessor :fixation_periods_full

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'description' => :'description',
        :'vat' => :'vat',
        :'amount' => :'amount',
        :'quantity' => :'quantity',
        :'prepaid' => :'prepaid',
        :'handle' => :'handle',
        :'dunning_plan' => :'dunning_plan',
        :'renewal_reminder_email_days' => :'renewal_reminder_email_days',
        :'trial_reminder_email_days' => :'trial_reminder_email_days',
        :'partial_period_handling' => :'partial_period_handling',
        :'include_zero_amount' => :'include_zero_amount',
        :'setup_fee' => :'setup_fee',
        :'setup_fee_text' => :'setup_fee_text',
        :'setup_fee_handling' => :'setup_fee_handling',
        :'amount_incl_vat' => :'amount_incl_vat',
        :'fixed_count' => :'fixed_count',
        :'fixed_life_time_unit' => :'fixed_life_time_unit',
        :'fixed_life_time_length' => :'fixed_life_time_length',
        :'trial_interval_unit' => :'trial_interval_unit',
        :'trial_interval_length' => :'trial_interval_length',
        :'interval_length' => :'interval_length',
        :'schedule_type' => :'schedule_type',
        :'schedule_fixed_day' => :'schedule_fixed_day',
        :'base_month' => :'base_month',
        :'notice_periods' => :'notice_periods',
        :'notice_periods_after_current' => :'notice_periods_after_current',
        :'fixation_periods' => :'fixation_periods',
        :'fixation_periods_full' => :'fixation_periods_full'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'description' => :'String',
        :'vat' => :'Float',
        :'amount' => :'Integer',
        :'quantity' => :'Integer',
        :'prepaid' => :'BOOLEAN',
        :'handle' => :'String',
        :'dunning_plan' => :'String',
        :'renewal_reminder_email_days' => :'Integer',
        :'trial_reminder_email_days' => :'Integer',
        :'partial_period_handling' => :'String',
        :'include_zero_amount' => :'BOOLEAN',
        :'setup_fee' => :'Integer',
        :'setup_fee_text' => :'String',
        :'setup_fee_handling' => :'String',
        :'amount_incl_vat' => :'BOOLEAN',
        :'fixed_count' => :'Integer',
        :'fixed_life_time_unit' => :'String',
        :'fixed_life_time_length' => :'Integer',
        :'trial_interval_unit' => :'String',
        :'trial_interval_length' => :'Integer',
        :'interval_length' => :'Integer',
        :'schedule_type' => :'String',
        :'schedule_fixed_day' => :'Integer',
        :'base_month' => :'Integer',
        :'notice_periods' => :'Integer',
        :'notice_periods_after_current' => :'BOOLEAN',
        :'fixation_periods' => :'Integer',
        :'fixation_periods_full' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'vat')
        self.vat = attributes[:'vat']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'prepaid')
        self.prepaid = attributes[:'prepaid']
      end

      if attributes.has_key?(:'handle')
        self.handle = attributes[:'handle']
      end

      if attributes.has_key?(:'dunning_plan')
        self.dunning_plan = attributes[:'dunning_plan']
      end

      if attributes.has_key?(:'renewal_reminder_email_days')
        self.renewal_reminder_email_days = attributes[:'renewal_reminder_email_days']
      end

      if attributes.has_key?(:'trial_reminder_email_days')
        self.trial_reminder_email_days = attributes[:'trial_reminder_email_days']
      end

      if attributes.has_key?(:'partial_period_handling')
        self.partial_period_handling = attributes[:'partial_period_handling']
      end

      if attributes.has_key?(:'include_zero_amount')
        self.include_zero_amount = attributes[:'include_zero_amount']
      end

      if attributes.has_key?(:'setup_fee')
        self.setup_fee = attributes[:'setup_fee']
      end

      if attributes.has_key?(:'setup_fee_text')
        self.setup_fee_text = attributes[:'setup_fee_text']
      end

      if attributes.has_key?(:'setup_fee_handling')
        self.setup_fee_handling = attributes[:'setup_fee_handling']
      end

      if attributes.has_key?(:'amount_incl_vat')
        self.amount_incl_vat = attributes[:'amount_incl_vat']
      end

      if attributes.has_key?(:'fixed_count')
        self.fixed_count = attributes[:'fixed_count']
      end

      if attributes.has_key?(:'fixed_life_time_unit')
        self.fixed_life_time_unit = attributes[:'fixed_life_time_unit']
      end

      if attributes.has_key?(:'fixed_life_time_length')
        self.fixed_life_time_length = attributes[:'fixed_life_time_length']
      end

      if attributes.has_key?(:'trial_interval_unit')
        self.trial_interval_unit = attributes[:'trial_interval_unit']
      end

      if attributes.has_key?(:'trial_interval_length')
        self.trial_interval_length = attributes[:'trial_interval_length']
      end

      if attributes.has_key?(:'interval_length')
        self.interval_length = attributes[:'interval_length']
      end

      if attributes.has_key?(:'schedule_type')
        self.schedule_type = attributes[:'schedule_type']
      end

      if attributes.has_key?(:'schedule_fixed_day')
        self.schedule_fixed_day = attributes[:'schedule_fixed_day']
      end

      if attributes.has_key?(:'base_month')
        self.base_month = attributes[:'base_month']
      end

      if attributes.has_key?(:'notice_periods')
        self.notice_periods = attributes[:'notice_periods']
      end

      if attributes.has_key?(:'notice_periods_after_current')
        self.notice_periods_after_current = attributes[:'notice_periods_after_current']
      end

      if attributes.has_key?(:'fixation_periods')
        self.fixation_periods = attributes[:'fixation_periods']
      end

      if attributes.has_key?(:'fixation_periods_full')
        self.fixation_periods_full = attributes[:'fixation_periods_full']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if !@vat.nil? && @vat > 1
        invalid_properties.push("invalid value for 'vat', must be smaller than or equal to 1.")
      end

      if !@vat.nil? && @vat < 0
        invalid_properties.push("invalid value for 'vat', must be greater than or equal to 0.")
      end

      if @amount.nil?
        invalid_properties.push("invalid value for 'amount', amount cannot be nil.")
      end

      if @amount < 0
        invalid_properties.push("invalid value for 'amount', must be greater than or equal to 0.")
      end

      if !@quantity.nil? && @quantity < 1
        invalid_properties.push("invalid value for 'quantity', must be greater than or equal to 1.")
      end

      if @handle.nil?
        invalid_properties.push("invalid value for 'handle', handle cannot be nil.")
      end

      if !@renewal_reminder_email_days.nil? && @renewal_reminder_email_days < 1
        invalid_properties.push("invalid value for 'renewal_reminder_email_days', must be greater than or equal to 1.")
      end

      if !@trial_reminder_email_days.nil? && @trial_reminder_email_days < 1
        invalid_properties.push("invalid value for 'trial_reminder_email_days', must be greater than or equal to 1.")
      end

      if !@setup_fee.nil? && @setup_fee < 0
        invalid_properties.push("invalid value for 'setup_fee', must be greater than or equal to 0.")
      end

      if !@fixed_count.nil? && @fixed_count < 1
        invalid_properties.push("invalid value for 'fixed_count', must be greater than or equal to 1.")
      end

      if !@fixed_life_time_length.nil? && @fixed_life_time_length < 1
        invalid_properties.push("invalid value for 'fixed_life_time_length', must be greater than or equal to 1.")
      end

      if !@trial_interval_length.nil? && @trial_interval_length < 1
        invalid_properties.push("invalid value for 'trial_interval_length', must be greater than or equal to 1.")
      end

      if @interval_length.nil?
        invalid_properties.push("invalid value for 'interval_length', interval_length cannot be nil.")
      end

      if @interval_length < 1
        invalid_properties.push("invalid value for 'interval_length', must be greater than or equal to 1.")
      end

      if @schedule_type.nil?
        invalid_properties.push("invalid value for 'schedule_type', schedule_type cannot be nil.")
      end

      if !@schedule_fixed_day.nil? && @schedule_fixed_day > 28
        invalid_properties.push("invalid value for 'schedule_fixed_day', must be smaller than or equal to 28.")
      end

      if !@schedule_fixed_day.nil? && @schedule_fixed_day < 1
        invalid_properties.push("invalid value for 'schedule_fixed_day', must be greater than or equal to 1.")
      end

      if !@base_month.nil? && @base_month > 12
        invalid_properties.push("invalid value for 'base_month', must be smaller than or equal to 12.")
      end

      if !@base_month.nil? && @base_month < 1
        invalid_properties.push("invalid value for 'base_month', must be greater than or equal to 1.")
      end

      if !@notice_periods.nil? && @notice_periods < 0
        invalid_properties.push("invalid value for 'notice_periods', must be greater than or equal to 0.")
      end

      if !@fixation_periods.nil? && @fixation_periods < 0
        invalid_properties.push("invalid value for 'fixation_periods', must be greater than or equal to 0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if !@vat.nil? && @vat > 1
      return false if !@vat.nil? && @vat < 0
      return false if @amount.nil?
      return false if @amount < 0
      return false if !@quantity.nil? && @quantity < 1
      return false if @handle.nil?
      return false if !@renewal_reminder_email_days.nil? && @renewal_reminder_email_days < 1
      return false if !@trial_reminder_email_days.nil? && @trial_reminder_email_days < 1
      partial_period_handling_validator = EnumAttributeValidator.new('String', ["bill_full", "bill_prorated", "bill_zero_amount", "no_bill"])
      return false unless partial_period_handling_validator.valid?(@partial_period_handling)
      return false if !@setup_fee.nil? && @setup_fee < 0
      return false if !@fixed_count.nil? && @fixed_count < 1
      fixed_life_time_unit_validator = EnumAttributeValidator.new('String', ["months", "days"])
      return false unless fixed_life_time_unit_validator.valid?(@fixed_life_time_unit)
      return false if !@fixed_life_time_length.nil? && @fixed_life_time_length < 1
      trial_interval_unit_validator = EnumAttributeValidator.new('String', ["months", "days"])
      return false unless trial_interval_unit_validator.valid?(@trial_interval_unit)
      return false if !@trial_interval_length.nil? && @trial_interval_length < 1
      return false if @interval_length.nil?
      return false if @interval_length < 1
      return false if @schedule_type.nil?
      schedule_type_validator = EnumAttributeValidator.new('String', ["manual", "daily", "weekly_fixedday", "month_startdate", "month_fixedday", "month_lastday"])
      return false unless schedule_type_validator.valid?(@schedule_type)
      return false if !@schedule_fixed_day.nil? && @schedule_fixed_day > 28
      return false if !@schedule_fixed_day.nil? && @schedule_fixed_day < 1
      return false if !@base_month.nil? && @base_month > 12
      return false if !@base_month.nil? && @base_month < 1
      return false if !@notice_periods.nil? && @notice_periods < 0
      return false if !@fixation_periods.nil? && @fixation_periods < 0
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] vat Value to be assigned
    def vat=(vat)

      if !vat.nil? && vat > 1
        fail ArgumentError, "invalid value for 'vat', must be smaller than or equal to 1."
      end

      if !vat.nil? && vat < 0
        fail ArgumentError, "invalid value for 'vat', must be greater than or equal to 0."
      end

      @vat = vat
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)
      if amount.nil?
        fail ArgumentError, "amount cannot be nil"
      end

      if amount < 0
        fail ArgumentError, "invalid value for 'amount', must be greater than or equal to 0."
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity Value to be assigned
    def quantity=(quantity)

      if !quantity.nil? && quantity < 1
        fail ArgumentError, "invalid value for 'quantity', must be greater than or equal to 1."
      end

      @quantity = quantity
    end

    # Custom attribute writer method with validation
    # @param [Object] renewal_reminder_email_days Value to be assigned
    def renewal_reminder_email_days=(renewal_reminder_email_days)

      if !renewal_reminder_email_days.nil? && renewal_reminder_email_days < 1
        fail ArgumentError, "invalid value for 'renewal_reminder_email_days', must be greater than or equal to 1."
      end

      @renewal_reminder_email_days = renewal_reminder_email_days
    end

    # Custom attribute writer method with validation
    # @param [Object] trial_reminder_email_days Value to be assigned
    def trial_reminder_email_days=(trial_reminder_email_days)

      if !trial_reminder_email_days.nil? && trial_reminder_email_days < 1
        fail ArgumentError, "invalid value for 'trial_reminder_email_days', must be greater than or equal to 1."
      end

      @trial_reminder_email_days = trial_reminder_email_days
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] partial_period_handling Object to be assigned
    def partial_period_handling=(partial_period_handling)
      validator = EnumAttributeValidator.new('String', ["bill_full", "bill_prorated", "bill_zero_amount", "no_bill"])
      unless validator.valid?(partial_period_handling)
        fail ArgumentError, "invalid value for 'partial_period_handling', must be one of #{validator.allowable_values}."
      end
      @partial_period_handling = partial_period_handling
    end

    # Custom attribute writer method with validation
    # @param [Object] setup_fee Value to be assigned
    def setup_fee=(setup_fee)

      if !setup_fee.nil? && setup_fee < 0
        fail ArgumentError, "invalid value for 'setup_fee', must be greater than or equal to 0."
      end

      @setup_fee = setup_fee
    end

    # Custom attribute writer method with validation
    # @param [Object] fixed_count Value to be assigned
    def fixed_count=(fixed_count)

      if !fixed_count.nil? && fixed_count < 1
        fail ArgumentError, "invalid value for 'fixed_count', must be greater than or equal to 1."
      end

      @fixed_count = fixed_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fixed_life_time_unit Object to be assigned
    def fixed_life_time_unit=(fixed_life_time_unit)
      validator = EnumAttributeValidator.new('String', ["months", "days"])
      unless validator.valid?(fixed_life_time_unit)
        fail ArgumentError, "invalid value for 'fixed_life_time_unit', must be one of #{validator.allowable_values}."
      end
      @fixed_life_time_unit = fixed_life_time_unit
    end

    # Custom attribute writer method with validation
    # @param [Object] fixed_life_time_length Value to be assigned
    def fixed_life_time_length=(fixed_life_time_length)

      if !fixed_life_time_length.nil? && fixed_life_time_length < 1
        fail ArgumentError, "invalid value for 'fixed_life_time_length', must be greater than or equal to 1."
      end

      @fixed_life_time_length = fixed_life_time_length
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_interval_unit Object to be assigned
    def trial_interval_unit=(trial_interval_unit)
      validator = EnumAttributeValidator.new('String', ["months", "days"])
      unless validator.valid?(trial_interval_unit)
        fail ArgumentError, "invalid value for 'trial_interval_unit', must be one of #{validator.allowable_values}."
      end
      @trial_interval_unit = trial_interval_unit
    end

    # Custom attribute writer method with validation
    # @param [Object] trial_interval_length Value to be assigned
    def trial_interval_length=(trial_interval_length)

      if !trial_interval_length.nil? && trial_interval_length < 1
        fail ArgumentError, "invalid value for 'trial_interval_length', must be greater than or equal to 1."
      end

      @trial_interval_length = trial_interval_length
    end

    # Custom attribute writer method with validation
    # @param [Object] interval_length Value to be assigned
    def interval_length=(interval_length)
      if interval_length.nil?
        fail ArgumentError, "interval_length cannot be nil"
      end

      if interval_length < 1
        fail ArgumentError, "invalid value for 'interval_length', must be greater than or equal to 1."
      end

      @interval_length = interval_length
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] schedule_type Object to be assigned
    def schedule_type=(schedule_type)
      validator = EnumAttributeValidator.new('String', ["manual", "daily", "weekly_fixedday", "month_startdate", "month_fixedday", "month_lastday"])
      unless validator.valid?(schedule_type)
        fail ArgumentError, "invalid value for 'schedule_type', must be one of #{validator.allowable_values}."
      end
      @schedule_type = schedule_type
    end

    # Custom attribute writer method with validation
    # @param [Object] schedule_fixed_day Value to be assigned
    def schedule_fixed_day=(schedule_fixed_day)

      if !schedule_fixed_day.nil? && schedule_fixed_day > 28
        fail ArgumentError, "invalid value for 'schedule_fixed_day', must be smaller than or equal to 28."
      end

      if !schedule_fixed_day.nil? && schedule_fixed_day < 1
        fail ArgumentError, "invalid value for 'schedule_fixed_day', must be greater than or equal to 1."
      end

      @schedule_fixed_day = schedule_fixed_day
    end

    # Custom attribute writer method with validation
    # @param [Object] base_month Value to be assigned
    def base_month=(base_month)

      if !base_month.nil? && base_month > 12
        fail ArgumentError, "invalid value for 'base_month', must be smaller than or equal to 12."
      end

      if !base_month.nil? && base_month < 1
        fail ArgumentError, "invalid value for 'base_month', must be greater than or equal to 1."
      end

      @base_month = base_month
    end

    # Custom attribute writer method with validation
    # @param [Object] notice_periods Value to be assigned
    def notice_periods=(notice_periods)

      if !notice_periods.nil? && notice_periods < 0
        fail ArgumentError, "invalid value for 'notice_periods', must be greater than or equal to 0."
      end

      @notice_periods = notice_periods
    end

    # Custom attribute writer method with validation
    # @param [Object] fixation_periods Value to be assigned
    def fixation_periods=(fixation_periods)

      if !fixation_periods.nil? && fixation_periods < 0
        fail ArgumentError, "invalid value for 'fixation_periods', must be greater than or equal to 0."
      end

      @fixation_periods = fixation_periods
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          description == o.description &&
          vat == o.vat &&
          amount == o.amount &&
          quantity == o.quantity &&
          prepaid == o.prepaid &&
          handle == o.handle &&
          dunning_plan == o.dunning_plan &&
          renewal_reminder_email_days == o.renewal_reminder_email_days &&
          trial_reminder_email_days == o.trial_reminder_email_days &&
          partial_period_handling == o.partial_period_handling &&
          include_zero_amount == o.include_zero_amount &&
          setup_fee == o.setup_fee &&
          setup_fee_text == o.setup_fee_text &&
          setup_fee_handling == o.setup_fee_handling &&
          amount_incl_vat == o.amount_incl_vat &&
          fixed_count == o.fixed_count &&
          fixed_life_time_unit == o.fixed_life_time_unit &&
          fixed_life_time_length == o.fixed_life_time_length &&
          trial_interval_unit == o.trial_interval_unit &&
          trial_interval_length == o.trial_interval_length &&
          interval_length == o.interval_length &&
          schedule_type == o.schedule_type &&
          schedule_fixed_day == o.schedule_fixed_day &&
          base_month == o.base_month &&
          notice_periods == o.notice_periods &&
          notice_periods_after_current == o.notice_periods_after_current &&
          fixation_periods == o.fixation_periods &&
          fixation_periods_full == o.fixation_periods_full
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, description, vat, amount, quantity, prepaid, handle, dunning_plan, renewal_reminder_email_days, trial_reminder_email_days, partial_period_handling, include_zero_amount, setup_fee, setup_fee_text, setup_fee_handling, amount_incl_vat, fixed_count, fixed_life_time_unit, fixed_life_time_length, trial_interval_unit, trial_interval_length, interval_length, schedule_type, schedule_fixed_day, base_month, notice_periods, notice_periods_after_current, fixation_periods, fixation_periods_full].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
