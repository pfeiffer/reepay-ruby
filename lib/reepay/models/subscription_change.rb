=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class SubscriptionChange
    # The handle of the plan to change to
    attr_accessor :plan

    # Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.
    attr_accessor :amount

    # Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.
    attr_accessor :quantity

    # Whether this is a pending change at next renewal, or it has been applied
    attr_accessor :pending

    # If defined the change was applied on this date and time
    attr_accessor :applied

    # Date and time of update of pending change
    attr_accessor :updated

    # Date when the change was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
    attr_accessor :created

    # Whether the optional amount is including VAT. Defaults to true.
    attr_accessor :amount_incl_vat

    # List of subscription add-ons to create in change
    attr_accessor :subscription_add_ons

    # Subscription add-ons to remove from subscription by subscription add-on handle
    attr_accessor :remove_add_ons


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'plan' => :'plan',
        :'amount' => :'amount',
        :'quantity' => :'quantity',
        :'pending' => :'pending',
        :'applied' => :'applied',
        :'updated' => :'updated',
        :'created' => :'created',
        :'amount_incl_vat' => :'amount_incl_vat',
        :'subscription_add_ons' => :'subscription_add_ons',
        :'remove_add_ons' => :'remove_add_ons'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'plan' => :'String',
        :'amount' => :'Integer',
        :'quantity' => :'Integer',
        :'pending' => :'BOOLEAN',
        :'applied' => :'DateTime',
        :'updated' => :'DateTime',
        :'created' => :'DateTime',
        :'amount_incl_vat' => :'BOOLEAN',
        :'subscription_add_ons' => :'Array<SubscriptionAddOn>',
        :'remove_add_ons' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'plan')
        self.plan = attributes[:'plan']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'pending')
        self.pending = attributes[:'pending']
      end

      if attributes.has_key?(:'applied')
        self.applied = attributes[:'applied']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'amount_incl_vat')
        self.amount_incl_vat = attributes[:'amount_incl_vat']
      end

      if attributes.has_key?(:'subscription_add_ons')
        if (value = attributes[:'subscription_add_ons']).is_a?(Array)
          self.subscription_add_ons = value
        end
      end

      if attributes.has_key?(:'remove_add_ons')
        if (value = attributes[:'remove_add_ons']).is_a?(Array)
          self.remove_add_ons = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@amount.nil? && @amount < 0
        invalid_properties.push("invalid value for 'amount', must be greater than or equal to 0.")
      end

      if !@quantity.nil? && @quantity < 1
        invalid_properties.push("invalid value for 'quantity', must be greater than or equal to 1.")
      end

      if @pending.nil?
        invalid_properties.push("invalid value for 'pending', pending cannot be nil.")
      end

      if @created.nil?
        invalid_properties.push("invalid value for 'created', created cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@amount.nil? && @amount < 0
      return false if !@quantity.nil? && @quantity < 1
      return false if @pending.nil?
      return false if @created.nil?
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)

      if !amount.nil? && amount < 0
        fail ArgumentError, "invalid value for 'amount', must be greater than or equal to 0."
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity Value to be assigned
    def quantity=(quantity)

      if !quantity.nil? && quantity < 1
        fail ArgumentError, "invalid value for 'quantity', must be greater than or equal to 1."
      end

      @quantity = quantity
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          plan == o.plan &&
          amount == o.amount &&
          quantity == o.quantity &&
          pending == o.pending &&
          applied == o.applied &&
          updated == o.updated &&
          created == o.created &&
          amount_incl_vat == o.amount_incl_vat &&
          subscription_add_ons == o.subscription_add_ons &&
          remove_add_ons == o.remove_add_ons
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [plan, amount, quantity, pending, applied, updated, created, amount_incl_vat, subscription_add_ons, remove_add_ons].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
