=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class WebhookSettings
    # Webhook urls
    attr_accessor :urls

    # Optional HTTP Basic Auth username
    attr_accessor :username

    # Optional HTTP Basic Auth password
    attr_accessor :password

    # Webhook disabled
    attr_accessor :disabled

    # Webhook secret used for signature
    attr_accessor :secret

    # Optional list of emails to send alert to if webhook fails
    attr_accessor :alert_emails

    # Number of requests to perform before alert email is sent, must be greater than or equal to four (1 hour)
    attr_accessor :alert_count


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'urls' => :'urls',
        :'username' => :'username',
        :'password' => :'password',
        :'disabled' => :'disabled',
        :'secret' => :'secret',
        :'alert_emails' => :'alert_emails',
        :'alert_count' => :'alert_count'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'urls' => :'Array<String>',
        :'username' => :'String',
        :'password' => :'String',
        :'disabled' => :'BOOLEAN',
        :'secret' => :'String',
        :'alert_emails' => :'Array<String>',
        :'alert_count' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'urls')
        if (value = attributes[:'urls']).is_a?(Array)
          self.urls = value
        end
      end

      if attributes.has_key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.has_key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.has_key?(:'disabled')
        self.disabled = attributes[:'disabled']
      end

      if attributes.has_key?(:'secret')
        self.secret = attributes[:'secret']
      end

      if attributes.has_key?(:'alert_emails')
        if (value = attributes[:'alert_emails']).is_a?(Array)
          self.alert_emails = value
        end
      end

      if attributes.has_key?(:'alert_count')
        self.alert_count = attributes[:'alert_count']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @urls.nil?
        invalid_properties.push("invalid value for 'urls', urls cannot be nil.")
      end

      if @disabled.nil?
        invalid_properties.push("invalid value for 'disabled', disabled cannot be nil.")
      end

      if @secret.nil?
        invalid_properties.push("invalid value for 'secret', secret cannot be nil.")
      end

      if !@alert_count.nil? && @alert_count < 4
        invalid_properties.push("invalid value for 'alert_count', must be greater than or equal to 4.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @urls.nil?
      return false if @disabled.nil?
      return false if @secret.nil?
      return false if !@alert_count.nil? && @alert_count < 4
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] alert_count Value to be assigned
    def alert_count=(alert_count)

      if !alert_count.nil? && alert_count < 4
        fail ArgumentError, "invalid value for 'alert_count', must be greater than or equal to 4."
      end

      @alert_count = alert_count
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          urls == o.urls &&
          username == o.username &&
          password == o.password &&
          disabled == o.disabled &&
          secret == o.secret &&
          alert_emails == o.alert_emails &&
          alert_count == o.alert_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [urls, username, password, disabled, secret, alert_emails, alert_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
