=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class Charge
    # Per account unique reference to charge/invoice. E.g. order id from own system. Multiple payments can be attempted for the same handle but only one succeeded charge can exist per handle. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
    attr_accessor :handle

    # The charge state one of the following: `authorized`, `settled`, `failed`, `cancelled`
    attr_accessor :state

    # Customer handle
    attr_accessor :customer

    # The invoice amount including VAT
    attr_accessor :amount

    # Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code
    attr_accessor :currency

    # When the charge was authorized, if the charge went through an authorize and settle flow, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
    attr_accessor :authorized

    # When the charge was settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
    attr_accessor :settled

    # When the charge was cancelled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
    attr_accessor :cancelled

    # When the invoice was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
    attr_accessor :created

    # Transaction id assigned by Reepay. Assigned when transaction is performed.
    attr_accessor :transaction

    # Reepay error code if failed. See [transaction errors](https://docs.reepay.com/api/#transaction-errors).
    attr_accessor :error

    # Object describing the source for the charge. E.g. credit card.
    attr_accessor :source

    # Order lines for charge
    attr_accessor :order_lines

    # Refunded amount
    attr_accessor :refunded_amount

    # Reepay error state if failed: `soft_declined`, `hard_declined` or `processing_error`. Soft and hard declines indicate a card decline. A soft decline is possibly recoverable and a subsequent request with the same card may succeed. E.g. insufficient funds. A processing error indicates an error processing the card either at Reepay, the acquirer, or between Reepay amd the acquirer.
    attr_accessor :error_state

    # Optional reference to recurring payment method created in conjunction with charging
    attr_accessor :recurring_payment_method

    # Optional billing address
    attr_accessor :billing_address

    # Optional shipping address
    attr_accessor :shipping_address

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'handle' => :'handle',
        :'state' => :'state',
        :'customer' => :'customer',
        :'amount' => :'amount',
        :'currency' => :'currency',
        :'authorized' => :'authorized',
        :'settled' => :'settled',
        :'cancelled' => :'cancelled',
        :'created' => :'created',
        :'transaction' => :'transaction',
        :'error' => :'error',
        :'source' => :'source',
        :'order_lines' => :'order_lines',
        :'refunded_amount' => :'refunded_amount',
        :'error_state' => :'error_state',
        :'recurring_payment_method' => :'recurring_payment_method',
        :'billing_address' => :'billing_address',
        :'shipping_address' => :'shipping_address'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'handle' => :'String',
        :'state' => :'String',
        :'customer' => :'String',
        :'amount' => :'Integer',
        :'currency' => :'String',
        :'authorized' => :'DateTime',
        :'settled' => :'DateTime',
        :'cancelled' => :'DateTime',
        :'created' => :'DateTime',
        :'transaction' => :'String',
        :'error' => :'String',
        :'source' => :'ChargeSource',
        :'order_lines' => :'Array<OrderLine>',
        :'refunded_amount' => :'Integer',
        :'error_state' => :'String',
        :'recurring_payment_method' => :'String',
        :'billing_address' => :'InvoiceBillingAddress',
        :'shipping_address' => :'InvoiceShippingAddress'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'handle')
        self.handle = attributes[:'handle']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'authorized')
        self.authorized = attributes[:'authorized']
      end

      if attributes.has_key?(:'settled')
        self.settled = attributes[:'settled']
      end

      if attributes.has_key?(:'cancelled')
        self.cancelled = attributes[:'cancelled']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'transaction')
        self.transaction = attributes[:'transaction']
      end

      if attributes.has_key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.has_key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.has_key?(:'order_lines')
        if (value = attributes[:'order_lines']).is_a?(Array)
          self.order_lines = value
        end
      end

      if attributes.has_key?(:'refunded_amount')
        self.refunded_amount = attributes[:'refunded_amount']
      end

      if attributes.has_key?(:'error_state')
        self.error_state = attributes[:'error_state']
      end

      if attributes.has_key?(:'recurring_payment_method')
        self.recurring_payment_method = attributes[:'recurring_payment_method']
      end

      if attributes.has_key?(:'billing_address')
        self.billing_address = attributes[:'billing_address']
      end

      if attributes.has_key?(:'shipping_address')
        self.shipping_address = attributes[:'shipping_address']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @handle.nil?
        invalid_properties.push("invalid value for 'handle', handle cannot be nil.")
      end

      if @state.nil?
        invalid_properties.push("invalid value for 'state', state cannot be nil.")
      end

      if @customer.nil?
        invalid_properties.push("invalid value for 'customer', customer cannot be nil.")
      end

      if @amount.nil?
        invalid_properties.push("invalid value for 'amount', amount cannot be nil.")
      end

      if @amount < 0
        invalid_properties.push("invalid value for 'amount', must be greater than or equal to 0.")
      end

      if @currency.nil?
        invalid_properties.push("invalid value for 'currency', currency cannot be nil.")
      end

      if @created.nil?
        invalid_properties.push("invalid value for 'created', created cannot be nil.")
      end

      if @source.nil?
        invalid_properties.push("invalid value for 'source', source cannot be nil.")
      end

      if @order_lines.nil?
        invalid_properties.push("invalid value for 'order_lines', order_lines cannot be nil.")
      end

      if @refunded_amount.nil?
        invalid_properties.push("invalid value for 'refunded_amount', refunded_amount cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @handle.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["authorized", "settled", "failed", "cancelled"])
      return false unless state_validator.valid?(@state)
      return false if @customer.nil?
      return false if @amount.nil?
      return false if @amount < 0
      return false if @currency.nil?
      return false if @created.nil?
      return false if @source.nil?
      return false if @order_lines.nil?
      return false if @refunded_amount.nil?
      error_state_validator = EnumAttributeValidator.new('String', ["soft_declined", "hard_declined", "processing_error"])
      return false unless error_state_validator.valid?(@error_state)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["authorized", "settled", "failed", "cancelled"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for 'state', must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)
      if amount.nil?
        fail ArgumentError, "amount cannot be nil"
      end

      if amount < 0
        fail ArgumentError, "invalid value for 'amount', must be greater than or equal to 0."
      end

      @amount = amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error_state Object to be assigned
    def error_state=(error_state)
      validator = EnumAttributeValidator.new('String', ["soft_declined", "hard_declined", "processing_error"])
      unless validator.valid?(error_state)
        fail ArgumentError, "invalid value for 'error_state', must be one of #{validator.allowable_values}."
      end
      @error_state = error_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          handle == o.handle &&
          state == o.state &&
          customer == o.customer &&
          amount == o.amount &&
          currency == o.currency &&
          authorized == o.authorized &&
          settled == o.settled &&
          cancelled == o.cancelled &&
          created == o.created &&
          transaction == o.transaction &&
          error == o.error &&
          source == o.source &&
          order_lines == o.order_lines &&
          refunded_amount == o.refunded_amount &&
          error_state == o.error_state &&
          recurring_payment_method == o.recurring_payment_method &&
          billing_address == o.billing_address &&
          shipping_address == o.shipping_address
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [handle, state, customer, amount, currency, authorized, settled, cancelled, created, transaction, error, source, order_lines, refunded_amount, error_state, recurring_payment_method, billing_address, shipping_address].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
