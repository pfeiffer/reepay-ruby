=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class Coupon
    # Per account unique handle for the coupon
    attr_accessor :handle

    # The coupon code. Maximum 100 characters.
    attr_accessor :code

    # Discount to use for coupon
    attr_accessor :discount

    # Internal name for the coupon.
    attr_accessor :name

    # Coupon state `active`, `expired`, `deleted` or `generating`
    attr_accessor :state

    # Coupon type either `single` or `set`
    attr_accessor :type

    # Number of times the coupon has been redeemed
    attr_accessor :redemptions

    # Date and time for expire if state expired. In ISO-8601 extended offset date-time format.
    attr_accessor :expired

    # Date when the coupon was created. In ISO-8601 extended offset date-time format.
    attr_accessor :created

    # Whether all plans are eligible for this coupon. Defaults to false.
    attr_accessor :all_plans

    # If not all_plans are set to true, then the set of eligible plan handles must be defined.
    attr_accessor :eligible_plans

    # Optional maximum number of times this coupon can be redeemed.
    attr_accessor :max_redemptions

    # Optional date and time until which the coupon is redeemable. In ISO-8601 extended offset date-time format.
    attr_accessor :valid_until

    # The expire reason if expired. One of `early`, `valid_until` or `max`. Respectively on demand early expire, valid until has passed or max redemptions has been reached.
    attr_accessor :expire_reason

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'handle' => :'handle',
        :'code' => :'code',
        :'discount' => :'discount',
        :'name' => :'name',
        :'state' => :'state',
        :'type' => :'type',
        :'redemptions' => :'redemptions',
        :'expired' => :'expired',
        :'created' => :'created',
        :'all_plans' => :'all_plans',
        :'eligible_plans' => :'eligible_plans',
        :'max_redemptions' => :'max_redemptions',
        :'valid_until' => :'valid_until',
        :'expire_reason' => :'expire_reason'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'handle' => :'String',
        :'code' => :'String',
        :'discount' => :'String',
        :'name' => :'String',
        :'state' => :'String',
        :'type' => :'String',
        :'redemptions' => :'Integer',
        :'expired' => :'DateTime',
        :'created' => :'DateTime',
        :'all_plans' => :'BOOLEAN',
        :'eligible_plans' => :'Array<String>',
        :'max_redemptions' => :'Integer',
        :'valid_until' => :'DateTime',
        :'expire_reason' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'handle')
        self.handle = attributes[:'handle']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'discount')
        self.discount = attributes[:'discount']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'redemptions')
        self.redemptions = attributes[:'redemptions']
      end

      if attributes.has_key?(:'expired')
        self.expired = attributes[:'expired']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'all_plans')
        self.all_plans = attributes[:'all_plans']
      end

      if attributes.has_key?(:'eligible_plans')
        if (value = attributes[:'eligible_plans']).is_a?(Array)
          self.eligible_plans = value
        end
      end

      if attributes.has_key?(:'max_redemptions')
        self.max_redemptions = attributes[:'max_redemptions']
      end

      if attributes.has_key?(:'valid_until')
        self.valid_until = attributes[:'valid_until']
      end

      if attributes.has_key?(:'expire_reason')
        self.expire_reason = attributes[:'expire_reason']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @handle.nil?
        invalid_properties.push("invalid value for 'handle', handle cannot be nil.")
      end

      if @code.nil?
        invalid_properties.push("invalid value for 'code', code cannot be nil.")
      end

      if @discount.nil?
        invalid_properties.push("invalid value for 'discount', discount cannot be nil.")
      end

      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if @state.nil?
        invalid_properties.push("invalid value for 'state', state cannot be nil.")
      end

      if @type.nil?
        invalid_properties.push("invalid value for 'type', type cannot be nil.")
      end

      if @redemptions.nil?
        invalid_properties.push("invalid value for 'redemptions', redemptions cannot be nil.")
      end

      if @created.nil?
        invalid_properties.push("invalid value for 'created', created cannot be nil.")
      end

      if !@max_redemptions.nil? && @max_redemptions < 0
        invalid_properties.push("invalid value for 'max_redemptions', must be greater than or equal to 0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @handle.nil?
      return false if @code.nil?
      return false if @discount.nil?
      return false if @name.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["active", "deleted", "expired", "generating"])
      return false unless state_validator.valid?(@state)
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["single", "set"])
      return false unless type_validator.valid?(@type)
      return false if @redemptions.nil?
      return false if @created.nil?
      return false if !@max_redemptions.nil? && @max_redemptions < 0
      expire_reason_validator = EnumAttributeValidator.new('String', ["early", "valid_until", "max"])
      return false unless expire_reason_validator.valid?(@expire_reason)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["active", "deleted", "expired", "generating"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for 'state', must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["single", "set"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for 'type', must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] max_redemptions Value to be assigned
    def max_redemptions=(max_redemptions)

      if !max_redemptions.nil? && max_redemptions < 0
        fail ArgumentError, "invalid value for 'max_redemptions', must be greater than or equal to 0."
      end

      @max_redemptions = max_redemptions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expire_reason Object to be assigned
    def expire_reason=(expire_reason)
      validator = EnumAttributeValidator.new('String', ["early", "valid_until", "max"])
      unless validator.valid?(expire_reason)
        fail ArgumentError, "invalid value for 'expire_reason', must be one of #{validator.allowable_values}."
      end
      @expire_reason = expire_reason
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          handle == o.handle &&
          code == o.code &&
          discount == o.discount &&
          name == o.name &&
          state == o.state &&
          type == o.type &&
          redemptions == o.redemptions &&
          expired == o.expired &&
          created == o.created &&
          all_plans == o.all_plans &&
          eligible_plans == o.eligible_plans &&
          max_redemptions == o.max_redemptions &&
          valid_until == o.valid_until &&
          expire_reason == o.expire_reason
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [handle, code, discount, name, state, type, redemptions, expired, created, all_plans, eligible_plans, max_redemptions, valid_until, expire_reason].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
