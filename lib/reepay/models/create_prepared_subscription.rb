=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class CreatePreparedSubscription
    # Customer handle of existing customer. Customer can also be provided in same operation by supplying the parameter `create_customer`.
    attr_accessor :customer

    # Plan handle
    attr_accessor :plan

    # Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.
    attr_accessor :amount

    # Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.
    attr_accessor :quantity

    # Test flag. If given it will be verified that the account state matches the intended create state.
    attr_accessor :test

    # Per account unique handle for the subscription. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle not defined.
    attr_accessor :handle

    # Create customer and subscription in an atomic operation
    attr_accessor :create_customer

    # Optional plan version, default is to use newest version of plan
    attr_accessor :plan_version

    # Whether the optional amount is including VAT. Defaults to true.
    attr_accessor :amount_incl_vat

    # Auto generate handle on the form sub-[sequence_number]
    attr_accessor :generate_handle

    # Date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` from which the subscription is eligible to schedule first invoice. If no time part is given start of day will be used. A start date in the past can be used, but no more than one period length in the past. A start date in the past can result in an instant invoice for a past billing period start. Default value is current date and time.
    attr_accessor :start_date

    # Fixed date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` where the subscription will automatically cancel. The subscription will expire at the end of the billing period containing the end date. Default is no fixed end date.
    attr_accessor :end_date

    # A grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method.
    attr_accessor :grace_duration

    # Override plan trial settings and disable trial
    attr_accessor :no_trial

    # Override plan setup fee settings and disable fee
    attr_accessor :no_setup_fee

    # Discounts to attach to subscription
    attr_accessor :subscription_discounts

    # Coupon codes to redeem for subscription
    attr_accessor :coupon_codes

    # Add-ons to attach to subscription. The same add-on can only be attached to subscription once unless unique handles are supplied for the subscription add-on.
    attr_accessor :add_ons

    # Additional costs to add to subscription at creation time
    attr_accessor :additional_costs


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'customer' => :'customer',
        :'plan' => :'plan',
        :'amount' => :'amount',
        :'quantity' => :'quantity',
        :'test' => :'test',
        :'handle' => :'handle',
        :'create_customer' => :'create_customer',
        :'plan_version' => :'plan_version',
        :'amount_incl_vat' => :'amount_incl_vat',
        :'generate_handle' => :'generate_handle',
        :'start_date' => :'start_date',
        :'end_date' => :'end_date',
        :'grace_duration' => :'grace_duration',
        :'no_trial' => :'no_trial',
        :'no_setup_fee' => :'no_setup_fee',
        :'subscription_discounts' => :'subscription_discounts',
        :'coupon_codes' => :'coupon_codes',
        :'add_ons' => :'add_ons',
        :'additional_costs' => :'additional_costs'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'customer' => :'String',
        :'plan' => :'String',
        :'amount' => :'Integer',
        :'quantity' => :'Integer',
        :'test' => :'BOOLEAN',
        :'handle' => :'String',
        :'create_customer' => :'CreateCustomer',
        :'plan_version' => :'Integer',
        :'amount_incl_vat' => :'BOOLEAN',
        :'generate_handle' => :'BOOLEAN',
        :'start_date' => :'String',
        :'end_date' => :'String',
        :'grace_duration' => :'Integer',
        :'no_trial' => :'BOOLEAN',
        :'no_setup_fee' => :'BOOLEAN',
        :'subscription_discounts' => :'Array<CreateSubscriptionDiscount>',
        :'coupon_codes' => :'Array<String>',
        :'add_ons' => :'Array<CreateSubscriptionAddOn>',
        :'additional_costs' => :'Array<CreateSubscriptionAdditionalCost>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.has_key?(:'plan')
        self.plan = attributes[:'plan']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'test')
        self.test = attributes[:'test']
      end

      if attributes.has_key?(:'handle')
        self.handle = attributes[:'handle']
      end

      if attributes.has_key?(:'create_customer')
        self.create_customer = attributes[:'create_customer']
      end

      if attributes.has_key?(:'plan_version')
        self.plan_version = attributes[:'plan_version']
      end

      if attributes.has_key?(:'amount_incl_vat')
        self.amount_incl_vat = attributes[:'amount_incl_vat']
      end

      if attributes.has_key?(:'generate_handle')
        self.generate_handle = attributes[:'generate_handle']
      end

      if attributes.has_key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.has_key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.has_key?(:'grace_duration')
        self.grace_duration = attributes[:'grace_duration']
      end

      if attributes.has_key?(:'no_trial')
        self.no_trial = attributes[:'no_trial']
      end

      if attributes.has_key?(:'no_setup_fee')
        self.no_setup_fee = attributes[:'no_setup_fee']
      end

      if attributes.has_key?(:'subscription_discounts')
        if (value = attributes[:'subscription_discounts']).is_a?(Array)
          self.subscription_discounts = value
        end
      end

      if attributes.has_key?(:'coupon_codes')
        if (value = attributes[:'coupon_codes']).is_a?(Array)
          self.coupon_codes = value
        end
      end

      if attributes.has_key?(:'add_ons')
        if (value = attributes[:'add_ons']).is_a?(Array)
          self.add_ons = value
        end
      end

      if attributes.has_key?(:'additional_costs')
        if (value = attributes[:'additional_costs']).is_a?(Array)
          self.additional_costs = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @plan.nil?
        invalid_properties.push("invalid value for 'plan', plan cannot be nil.")
      end

      if !@amount.nil? && @amount < 0
        invalid_properties.push("invalid value for 'amount', must be greater than or equal to 0.")
      end

      if !@quantity.nil? && @quantity < 1
        invalid_properties.push("invalid value for 'quantity', must be greater than or equal to 1.")
      end

      if !@plan_version.nil? && @plan_version < 1
        invalid_properties.push("invalid value for 'plan_version', must be greater than or equal to 1.")
      end

      if !@grace_duration.nil? && @grace_duration < 0
        invalid_properties.push("invalid value for 'grace_duration', must be greater than or equal to 0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @plan.nil?
      return false if !@amount.nil? && @amount < 0
      return false if !@quantity.nil? && @quantity < 1
      return false if !@plan_version.nil? && @plan_version < 1
      return false if !@grace_duration.nil? && @grace_duration < 0
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)

      if !amount.nil? && amount < 0
        fail ArgumentError, "invalid value for 'amount', must be greater than or equal to 0."
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity Value to be assigned
    def quantity=(quantity)

      if !quantity.nil? && quantity < 1
        fail ArgumentError, "invalid value for 'quantity', must be greater than or equal to 1."
      end

      @quantity = quantity
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_version Value to be assigned
    def plan_version=(plan_version)

      if !plan_version.nil? && plan_version < 1
        fail ArgumentError, "invalid value for 'plan_version', must be greater than or equal to 1."
      end

      @plan_version = plan_version
    end

    # Custom attribute writer method with validation
    # @param [Object] grace_duration Value to be assigned
    def grace_duration=(grace_duration)

      if !grace_duration.nil? && grace_duration < 0
        fail ArgumentError, "invalid value for 'grace_duration', must be greater than or equal to 0."
      end

      @grace_duration = grace_duration
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          customer == o.customer &&
          plan == o.plan &&
          amount == o.amount &&
          quantity == o.quantity &&
          test == o.test &&
          handle == o.handle &&
          create_customer == o.create_customer &&
          plan_version == o.plan_version &&
          amount_incl_vat == o.amount_incl_vat &&
          generate_handle == o.generate_handle &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          grace_duration == o.grace_duration &&
          no_trial == o.no_trial &&
          no_setup_fee == o.no_setup_fee &&
          subscription_discounts == o.subscription_discounts &&
          coupon_codes == o.coupon_codes &&
          add_ons == o.add_ons &&
          additional_costs == o.additional_costs
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [customer, plan, amount, quantity, test, handle, create_customer, plan_version, amount_incl_vat, generate_handle, start_date, end_date, grace_duration, no_trial, no_setup_fee, subscription_discounts, coupon_codes, add_ons, additional_costs].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
