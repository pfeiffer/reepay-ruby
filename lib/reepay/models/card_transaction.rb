=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class CardTransaction
    # Card used for transaction
    attr_accessor :card

    # Error code if failed. See [transaction errors](https://docs.reepay.com/api/#transaction-errors).
    attr_accessor :error

    # Uniquely identifies this particular card number
    attr_accessor :fingerprint

    # Acquirer or payment gateway used: `reepay`, `clearhaus`, `nets`, `dibs`, `stripe`, `quickpay`, `epay`, `test`
    attr_accessor :provider

    # Id of a possible referenced transaction
    attr_accessor :ref_transaction

    # Gateway id for card
    attr_accessor :gw_id

    # When the card transaction last failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
    attr_accessor :last_failed

    # When the card transaction first failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
    attr_accessor :first_failed

    # Error state if failed: `pending`, `soft_declined`, `hard_declined` or `processing_error`
    attr_accessor :error_state

    # Card type: `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover` or `jcb`
    attr_accessor :card_type

    # Card expire date on form MM-YY 
    attr_accessor :exp_date

    # Masked card number
    attr_accessor :masked_card

    # Status for strong customer authentication
    attr_accessor :strong_authentication_status

    # Acquirer error code in case of error
    attr_accessor :acquirer_code

    # Acquirer message in case of error
    attr_accessor :acquirer_message

    # Acquirer reference to transaction. E.g. Nets order id or Clearhaus reference.
    attr_accessor :acquirer_reference

    # Resulting text on bank statement if known
    attr_accessor :text_on_statement

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'card' => :'card',
        :'error' => :'error',
        :'fingerprint' => :'fingerprint',
        :'provider' => :'provider',
        :'ref_transaction' => :'ref_transaction',
        :'gw_id' => :'gw_id',
        :'last_failed' => :'last_failed',
        :'first_failed' => :'first_failed',
        :'error_state' => :'error_state',
        :'card_type' => :'card_type',
        :'exp_date' => :'exp_date',
        :'masked_card' => :'masked_card',
        :'strong_authentication_status' => :'strong_authentication_status',
        :'acquirer_code' => :'acquirer_code',
        :'acquirer_message' => :'acquirer_message',
        :'acquirer_reference' => :'acquirer_reference',
        :'text_on_statement' => :'text_on_statement'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'card' => :'Card',
        :'error' => :'String',
        :'fingerprint' => :'String',
        :'provider' => :'String',
        :'ref_transaction' => :'String',
        :'gw_id' => :'String',
        :'last_failed' => :'DateTime',
        :'first_failed' => :'DateTime',
        :'error_state' => :'String',
        :'card_type' => :'String',
        :'exp_date' => :'String',
        :'masked_card' => :'String',
        :'strong_authentication_status' => :'String',
        :'acquirer_code' => :'String',
        :'acquirer_message' => :'String',
        :'acquirer_reference' => :'String',
        :'text_on_statement' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'card')
        self.card = attributes[:'card']
      end

      if attributes.has_key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.has_key?(:'fingerprint')
        self.fingerprint = attributes[:'fingerprint']
      end

      if attributes.has_key?(:'provider')
        self.provider = attributes[:'provider']
      end

      if attributes.has_key?(:'ref_transaction')
        self.ref_transaction = attributes[:'ref_transaction']
      end

      if attributes.has_key?(:'gw_id')
        self.gw_id = attributes[:'gw_id']
      end

      if attributes.has_key?(:'last_failed')
        self.last_failed = attributes[:'last_failed']
      end

      if attributes.has_key?(:'first_failed')
        self.first_failed = attributes[:'first_failed']
      end

      if attributes.has_key?(:'error_state')
        self.error_state = attributes[:'error_state']
      end

      if attributes.has_key?(:'card_type')
        self.card_type = attributes[:'card_type']
      end

      if attributes.has_key?(:'exp_date')
        self.exp_date = attributes[:'exp_date']
      end

      if attributes.has_key?(:'masked_card')
        self.masked_card = attributes[:'masked_card']
      end

      if attributes.has_key?(:'strong_authentication_status')
        self.strong_authentication_status = attributes[:'strong_authentication_status']
      end

      if attributes.has_key?(:'acquirer_code')
        self.acquirer_code = attributes[:'acquirer_code']
      end

      if attributes.has_key?(:'acquirer_message')
        self.acquirer_message = attributes[:'acquirer_message']
      end

      if attributes.has_key?(:'acquirer_reference')
        self.acquirer_reference = attributes[:'acquirer_reference']
      end

      if attributes.has_key?(:'text_on_statement')
        self.text_on_statement = attributes[:'text_on_statement']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @card.nil?
        invalid_properties.push("invalid value for 'card', card cannot be nil.")
      end

      if @card_type.nil?
        invalid_properties.push("invalid value for 'card_type', card_type cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @card.nil?
      provider_validator = EnumAttributeValidator.new('String', ["reepay", "clearhaus", "nets", "dibs", "stripe", "quickpay", "epay", "test"])
      return false unless provider_validator.valid?(@provider)
      error_state_validator = EnumAttributeValidator.new('String', ["pending", "soft_declined", "hard_declined", "processing_error"])
      return false unless error_state_validator.valid?(@error_state)
      return false if @card_type.nil?
      card_type_validator = EnumAttributeValidator.new('String', ["unknown", "visa", "mc", "dankort", "visa_dk", "visa_elec", "maestro", "laser", "amex", "diners", "discover", "jcb"])
      return false unless card_type_validator.valid?(@card_type)
      strong_authentication_status_validator = EnumAttributeValidator.new('String', ["threed_secure", "threed_secure_not_enrolled", "threed_secure_local_only", "secured_by_nets"])
      return false unless strong_authentication_status_validator.valid?(@strong_authentication_status)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] provider Object to be assigned
    def provider=(provider)
      validator = EnumAttributeValidator.new('String', ["reepay", "clearhaus", "nets", "dibs", "stripe", "quickpay", "epay", "test"])
      unless validator.valid?(provider)
        fail ArgumentError, "invalid value for 'provider', must be one of #{validator.allowable_values}."
      end
      @provider = provider
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error_state Object to be assigned
    def error_state=(error_state)
      validator = EnumAttributeValidator.new('String', ["pending", "soft_declined", "hard_declined", "processing_error"])
      unless validator.valid?(error_state)
        fail ArgumentError, "invalid value for 'error_state', must be one of #{validator.allowable_values}."
      end
      @error_state = error_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_type Object to be assigned
    def card_type=(card_type)
      validator = EnumAttributeValidator.new('String', ["unknown", "visa", "mc", "dankort", "visa_dk", "visa_elec", "maestro", "laser", "amex", "diners", "discover", "jcb"])
      unless validator.valid?(card_type)
        fail ArgumentError, "invalid value for 'card_type', must be one of #{validator.allowable_values}."
      end
      @card_type = card_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] strong_authentication_status Object to be assigned
    def strong_authentication_status=(strong_authentication_status)
      validator = EnumAttributeValidator.new('String', ["threed_secure", "threed_secure_not_enrolled", "threed_secure_local_only", "secured_by_nets"])
      unless validator.valid?(strong_authentication_status)
        fail ArgumentError, "invalid value for 'strong_authentication_status', must be one of #{validator.allowable_values}."
      end
      @strong_authentication_status = strong_authentication_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          card == o.card &&
          error == o.error &&
          fingerprint == o.fingerprint &&
          provider == o.provider &&
          ref_transaction == o.ref_transaction &&
          gw_id == o.gw_id &&
          last_failed == o.last_failed &&
          first_failed == o.first_failed &&
          error_state == o.error_state &&
          card_type == o.card_type &&
          exp_date == o.exp_date &&
          masked_card == o.masked_card &&
          strong_authentication_status == o.strong_authentication_status &&
          acquirer_code == o.acquirer_code &&
          acquirer_message == o.acquirer_message &&
          acquirer_reference == o.acquirer_reference &&
          text_on_statement == o.text_on_statement
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [card, error, fingerprint, provider, ref_transaction, gw_id, last_failed, first_failed, error_state, card_type, exp_date, masked_card, strong_authentication_status, acquirer_code, acquirer_message, acquirer_reference, text_on_statement].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
