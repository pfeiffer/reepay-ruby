=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class UpdateCardGatewayAgreement
    # Card types supported by agreement
    attr_accessor :card_types

    # Key value map of provider settings
    attr_accessor :provider_settings

    # Use 3DSecure for non-recurring payments (if supported by provider)
    attr_accessor :threed_secure

    # Use 3DSecure for recurring payments (if supported by provider)
    attr_accessor :threed_secure_recurring

    # Use Secured By Nets for non-recurring payments (if supported by provider)
    attr_accessor :secured_by_nets

    # Use Secured By Nets for recurring payments (if supported by provider)
    attr_accessor :secured_by_nets_recurring


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'card_types' => :'card_types',
        :'provider_settings' => :'provider_settings',
        :'threed_secure' => :'threed_secure',
        :'threed_secure_recurring' => :'threed_secure_recurring',
        :'secured_by_nets' => :'secured_by_nets',
        :'secured_by_nets_recurring' => :'secured_by_nets_recurring'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'card_types' => :'Array<String>',
        :'provider_settings' => :'Hash<String, Object>',
        :'threed_secure' => :'BOOLEAN',
        :'threed_secure_recurring' => :'BOOLEAN',
        :'secured_by_nets' => :'BOOLEAN',
        :'secured_by_nets_recurring' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'card_types')
        if (value = attributes[:'card_types']).is_a?(Array)
          self.card_types = value
        end
      end

      if attributes.has_key?(:'provider_settings')
        if (value = attributes[:'provider_settings']).is_a?(Hash)
          self.provider_settings = value
        end
      end

      if attributes.has_key?(:'threed_secure')
        self.threed_secure = attributes[:'threed_secure']
      end

      if attributes.has_key?(:'threed_secure_recurring')
        self.threed_secure_recurring = attributes[:'threed_secure_recurring']
      end

      if attributes.has_key?(:'secured_by_nets')
        self.secured_by_nets = attributes[:'secured_by_nets']
      end

      if attributes.has_key?(:'secured_by_nets_recurring')
        self.secured_by_nets_recurring = attributes[:'secured_by_nets_recurring']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @card_types.nil?
        invalid_properties.push("invalid value for 'card_types', card_types cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @card_types.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          card_types == o.card_types &&
          provider_settings == o.provider_settings &&
          threed_secure == o.threed_secure &&
          threed_secure_recurring == o.threed_secure_recurring &&
          secured_by_nets == o.secured_by_nets &&
          secured_by_nets_recurring == o.secured_by_nets_recurring
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [card_types, provider_settings, threed_secure, threed_secure_recurring, secured_by_nets, secured_by_nets_recurring].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
