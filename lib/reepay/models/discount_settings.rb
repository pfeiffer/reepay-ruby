=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class DiscountSettings
    # The order to apply multiple discounts in, one of the following: `percentage_first`, `amount_first`
    attr_accessor :discount_apply_order

    # The rule for applying multiple percentage discounts, one of the following: `full`, `compound`
    attr_accessor :discount_percentage_apply

    # If multiple discounts per subscription is allowed
    attr_accessor :multiple_allowed

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'discount_apply_order' => :'discount_apply_order',
        :'discount_percentage_apply' => :'discount_percentage_apply',
        :'multiple_allowed' => :'multiple_allowed'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'discount_apply_order' => :'String',
        :'discount_percentage_apply' => :'String',
        :'multiple_allowed' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'discount_apply_order')
        self.discount_apply_order = attributes[:'discount_apply_order']
      end

      if attributes.has_key?(:'discount_percentage_apply')
        self.discount_percentage_apply = attributes[:'discount_percentage_apply']
      end

      if attributes.has_key?(:'multiple_allowed')
        self.multiple_allowed = attributes[:'multiple_allowed']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @discount_apply_order.nil?
        invalid_properties.push("invalid value for 'discount_apply_order', discount_apply_order cannot be nil.")
      end

      if @discount_percentage_apply.nil?
        invalid_properties.push("invalid value for 'discount_percentage_apply', discount_percentage_apply cannot be nil.")
      end

      if @multiple_allowed.nil?
        invalid_properties.push("invalid value for 'multiple_allowed', multiple_allowed cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @discount_apply_order.nil?
      discount_apply_order_validator = EnumAttributeValidator.new('String', ["percentage_first", "amount_first"])
      return false unless discount_apply_order_validator.valid?(@discount_apply_order)
      return false if @discount_percentage_apply.nil?
      discount_percentage_apply_validator = EnumAttributeValidator.new('String', ["full", "compound"])
      return false unless discount_percentage_apply_validator.valid?(@discount_percentage_apply)
      return false if @multiple_allowed.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discount_apply_order Object to be assigned
    def discount_apply_order=(discount_apply_order)
      validator = EnumAttributeValidator.new('String', ["percentage_first", "amount_first"])
      unless validator.valid?(discount_apply_order)
        fail ArgumentError, "invalid value for 'discount_apply_order', must be one of #{validator.allowable_values}."
      end
      @discount_apply_order = discount_apply_order
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discount_percentage_apply Object to be assigned
    def discount_percentage_apply=(discount_percentage_apply)
      validator = EnumAttributeValidator.new('String', ["full", "compound"])
      unless validator.valid?(discount_percentage_apply)
        fail ArgumentError, "invalid value for 'discount_percentage_apply', must be one of #{validator.allowable_values}."
      end
      @discount_percentage_apply = discount_percentage_apply
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          discount_apply_order == o.discount_apply_order &&
          discount_percentage_apply == o.discount_percentage_apply &&
          multiple_allowed == o.multiple_allowed
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [discount_apply_order, discount_percentage_apply, multiple_allowed].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
