=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class CreateSubscriptionInvoice
    # Per account unique handle for the invoice. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. It is recommended to use a maximum of 20 characters as this will allow for the use of handle as reference on bank statements without truncation.
    attr_accessor :handle

    # Create and process invoice instantly and leave as either `settled` or `failed`. The default is to leave the invoice for automatic processing and potential dunning management as other subscription invoices (default false).
    attr_accessor :instant

    # Optional due date and time on the form yyyy-MM-dd, yyyyMMdd, yyyy-MM-ddTHH:mm and yyyy-MM-ddTHH:mm:ss from which the invoice is eligible to be collected. Will not be used when `instant` is used. 
    attr_accessor :due

    # Optional settle to perform after creation using a different payment method. If the settle fails the status will be `failed` if instant or `pending` if not instant. The `due` date will be ignored for subscription invoice create.
    attr_accessor :settle

    # Create manually for plan by adding plan product and potential add-ons as order line (default false)
    attr_accessor :plan_manual

    # Collect pending additional costs and transfer to invoice (default true)
    attr_accessor :collect_additional_costs

    # Collect pending credit and transfer to invoice (default true)
    attr_accessor :collect_credit

    # Apply potential discounts for the subscription to the invoice order lines (default true)
    attr_accessor :apply_discounts

    # Optional additional order lines for the invoice
    attr_accessor :order_lines

    # Optional manual transfer. If given the invoice will be settled using the manual transfer transaction.
    attr_accessor :manual_transfer

    # Optional billing address
    attr_accessor :billing_address

    # Optional shipping address
    attr_accessor :shipping_address


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'handle' => :'handle',
        :'instant' => :'instant',
        :'due' => :'due',
        :'settle' => :'settle',
        :'plan_manual' => :'plan_manual',
        :'collect_additional_costs' => :'collect_additional_costs',
        :'collect_credit' => :'collect_credit',
        :'apply_discounts' => :'apply_discounts',
        :'order_lines' => :'order_lines',
        :'manual_transfer' => :'manual_transfer',
        :'billing_address' => :'billing_address',
        :'shipping_address' => :'shipping_address'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'handle' => :'String',
        :'instant' => :'BOOLEAN',
        :'due' => :'String',
        :'settle' => :'Settle',
        :'plan_manual' => :'BOOLEAN',
        :'collect_additional_costs' => :'BOOLEAN',
        :'collect_credit' => :'BOOLEAN',
        :'apply_discounts' => :'BOOLEAN',
        :'order_lines' => :'Array<CreateOrderLine>',
        :'manual_transfer' => :'ManualSettleTransfer',
        :'billing_address' => :'InvoiceBillingAddress',
        :'shipping_address' => :'InvoiceShippingAddress'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'handle')
        self.handle = attributes[:'handle']
      end

      if attributes.has_key?(:'instant')
        self.instant = attributes[:'instant']
      end

      if attributes.has_key?(:'due')
        self.due = attributes[:'due']
      end

      if attributes.has_key?(:'settle')
        self.settle = attributes[:'settle']
      end

      if attributes.has_key?(:'plan_manual')
        self.plan_manual = attributes[:'plan_manual']
      end

      if attributes.has_key?(:'collect_additional_costs')
        self.collect_additional_costs = attributes[:'collect_additional_costs']
      end

      if attributes.has_key?(:'collect_credit')
        self.collect_credit = attributes[:'collect_credit']
      end

      if attributes.has_key?(:'apply_discounts')
        self.apply_discounts = attributes[:'apply_discounts']
      end

      if attributes.has_key?(:'order_lines')
        if (value = attributes[:'order_lines']).is_a?(Array)
          self.order_lines = value
        end
      end

      if attributes.has_key?(:'manual_transfer')
        self.manual_transfer = attributes[:'manual_transfer']
      end

      if attributes.has_key?(:'billing_address')
        self.billing_address = attributes[:'billing_address']
      end

      if attributes.has_key?(:'shipping_address')
        self.shipping_address = attributes[:'shipping_address']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @handle.nil?
        invalid_properties.push("invalid value for 'handle', handle cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @handle.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          handle == o.handle &&
          instant == o.instant &&
          due == o.due &&
          settle == o.settle &&
          plan_manual == o.plan_manual &&
          collect_additional_costs == o.collect_additional_costs &&
          collect_credit == o.collect_credit &&
          apply_discounts == o.apply_discounts &&
          order_lines == o.order_lines &&
          manual_transfer == o.manual_transfer &&
          billing_address == o.billing_address &&
          shipping_address == o.shipping_address
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [handle, instant, due, settle, plan_manual, collect_additional_costs, collect_credit, apply_discounts, order_lines, manual_transfer, billing_address, shipping_address].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
