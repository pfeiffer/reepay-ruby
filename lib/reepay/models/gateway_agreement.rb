=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module Reepay

  class GatewayAgreement
    # Agreement id
    attr_accessor :id

    # Agreement state: `active`, `disabled`, `pending` or `deleted`
    attr_accessor :state

    # Agreement type: `card`, `viabill`, `mobilepay`, `mobilepay_subscription`
    attr_accessor :type

    # Agreement payment type usage: `single`, `reusable`, `subscription`
    attr_accessor :usage

    # Test agreement or not
    attr_accessor :test

    # Date when the agreement was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
    attr_accessor :created

    # Card gateway agreement details in case of card gateway
    attr_accessor :card_gateway_agreement

    # Payment gateway in case of payment gateway
    attr_accessor :pgw_agreement

    # MobilePay subscription agreement details in case of MobilePay subscription
    attr_accessor :mobile_pay_subscription_agreement

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'state' => :'state',
        :'type' => :'type',
        :'usage' => :'usage',
        :'test' => :'test',
        :'created' => :'created',
        :'card_gateway_agreement' => :'card_gateway_agreement',
        :'pgw_agreement' => :'pgw_agreement',
        :'mobile_pay_subscription_agreement' => :'mobile_pay_subscription_agreement'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'state' => :'String',
        :'type' => :'String',
        :'usage' => :'String',
        :'test' => :'BOOLEAN',
        :'created' => :'DateTime',
        :'card_gateway_agreement' => :'CardGatewayAgreement',
        :'pgw_agreement' => :'PgwAgreement',
        :'mobile_pay_subscription_agreement' => :'MobilePaySubscriptionAgreement'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'usage')
        self.usage = attributes[:'usage']
      end

      if attributes.has_key?(:'test')
        self.test = attributes[:'test']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'card_gateway_agreement')
        self.card_gateway_agreement = attributes[:'card_gateway_agreement']
      end

      if attributes.has_key?(:'pgw_agreement')
        self.pgw_agreement = attributes[:'pgw_agreement']
      end

      if attributes.has_key?(:'mobile_pay_subscription_agreement')
        self.mobile_pay_subscription_agreement = attributes[:'mobile_pay_subscription_agreement']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push("invalid value for 'id', id cannot be nil.")
      end

      if @state.nil?
        invalid_properties.push("invalid value for 'state', state cannot be nil.")
      end

      if @type.nil?
        invalid_properties.push("invalid value for 'type', type cannot be nil.")
      end

      if @usage.nil?
        invalid_properties.push("invalid value for 'usage', usage cannot be nil.")
      end

      if @test.nil?
        invalid_properties.push("invalid value for 'test', test cannot be nil.")
      end

      if @created.nil?
        invalid_properties.push("invalid value for 'created', created cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["active", "disabled", "pending", "deleted"])
      return false unless state_validator.valid?(@state)
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["creditcard", "viabill", "mobilepay", "mobilepay_subscription"])
      return false unless type_validator.valid?(@type)
      return false if @usage.nil?
      usage_validator = EnumAttributeValidator.new('String', ["single", "reusable", "subscription"])
      return false unless usage_validator.valid?(@usage)
      return false if @test.nil?
      return false if @created.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["active", "disabled", "pending", "deleted"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for 'state', must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["creditcard", "viabill", "mobilepay", "mobilepay_subscription"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for 'type', must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage Object to be assigned
    def usage=(usage)
      validator = EnumAttributeValidator.new('String', ["single", "reusable", "subscription"])
      unless validator.valid?(usage)
        fail ArgumentError, "invalid value for 'usage', must be one of #{validator.allowable_values}."
      end
      @usage = usage
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          state == o.state &&
          type == o.type &&
          usage == o.usage &&
          test == o.test &&
          created == o.created &&
          card_gateway_agreement == o.card_gateway_agreement &&
          pgw_agreement == o.pgw_agreement &&
          mobile_pay_subscription_agreement == o.mobile_pay_subscription_agreement
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, state, type, usage, test, created, card_gateway_agreement, pgw_agreement, mobile_pay_subscription_agreement].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Reepay.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
