=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Reepay
  class EventApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get event
    # 
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @return [Event]
    def get_event(id, opts = {})
      data, _status_code, _headers = get_event_with_http_info(id, opts)
      return data
    end

    # Get event
    # 
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Event, Fixnum, Hash)>] Event data, response status code and response headers
    def get_event_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventApi.get_event ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventApi.get_event"
      end
      # resource path
      local_var_path = "/v1/event/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Event')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventApi#get_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of events
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to get (default to 1)
    # @option opts [Integer] :size Page size to use (default to 20)
    # @option opts [String] :customer Customer handle
    # @option opts [String] :subscription Subscription handle
    # @option opts [String] :invoice Invoice id
    # @return [EventList]
    def get_events(opts = {})
      data, _status_code, _headers = get_events_with_http_info(opts)
      return data
    end

    # Get list of events
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to get
    # @option opts [Integer] :size Page size to use
    # @option opts [String] :customer Customer handle
    # @option opts [String] :subscription Subscription handle
    # @option opts [String] :invoice Invoice id
    # @return [Array<(EventList, Fixnum, Hash)>] EventList data, response status code and response headers
    def get_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventApi.get_events ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 10000000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling EventApi.get_events, must be smaller than or equal to 10000000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling EventApi.get_events, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling EventApi.get_events, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling EventApi.get_events, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/v1/event"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'customer'] = opts[:'customer'] if !opts[:'customer'].nil?
      query_params[:'subscription'] = opts[:'subscription'] if !opts[:'subscription'].nil?
      query_params[:'invoice'] = opts[:'invoice'] if !opts[:'invoice'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EventList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
