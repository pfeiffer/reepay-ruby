=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Reepay
  class InvoiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Cancel all dunning and pending
    # 
    # @param handle Subscriptiom handle
    # @param [Hash] opts the optional parameters
    # @return [Array<Invoice>]
    def cancel_all_dunning_pending(handle, opts = {})
      data, _status_code, _headers = cancel_all_dunning_pending_with_http_info(handle, opts)
      return data
    end

    # Cancel all dunning and pending
    # 
    # @param handle Subscriptiom handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Invoice>, Fixnum, Hash)>] Array<Invoice> data, response status code and response headers
    def cancel_all_dunning_pending_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.cancel_all_dunning_pending ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling InvoiceApi.cancel_all_dunning_pending"
      end
      # resource path
      local_var_path = "/v1/invoice/cancel_all_dunning_pending/subscription/{handle}".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Invoice>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#cancel_all_dunning_pending\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel invoice
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def cancel_invoice(id, opts = {})
      data, _status_code, _headers = cancel_invoice_with_http_info(id, opts)
      return data
    end

    # Cancel invoice
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def cancel_invoice_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.cancel_invoice ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.cancel_invoice"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/cancel".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#cancel_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel settle later
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def cancel_settle_later(id, opts = {})
      data, _status_code, _headers = cancel_settle_later_with_http_info(id, opts)
      return data
    end

    # Cancel settle later
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def cancel_settle_later_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.cancel_settle_later ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.cancel_settle_later"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/settle/cancel".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#cancel_settle_later\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel transaction
    # 
    # @param id Invoice id or handle
    # @param transaction Transaction id
    # @param [Hash] opts the optional parameters
    # @return [Transaction]
    def cancel_transaction(id, transaction, opts = {})
      data, _status_code, _headers = cancel_transaction_with_http_info(id, transaction, opts)
      return data
    end

    # Cancel transaction
    # 
    # @param id Invoice id or handle
    # @param transaction Transaction id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Transaction, Fixnum, Hash)>] Transaction data, response status code and response headers
    def cancel_transaction_with_http_info(id, transaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.cancel_transaction ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.cancel_transaction"
      end
      # verify the required parameter 'transaction' is set
      if @api_client.config.client_side_validation && transaction.nil?
        fail ArgumentError, "Missing the required parameter 'transaction' when calling InvoiceApi.cancel_transaction"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/transaction/{transaction}/cancel".sub('{' + 'id' + '}', id.to_s).sub('{' + 'transaction' + '}', transaction.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Transaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#cancel_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update invoice billing address
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @option opts [InvoiceBillingAddress] :body 
    # @return [Invoice]
    def create_or_update_billing_address(id, opts = {})
      data, _status_code, _headers = create_or_update_billing_address_with_http_info(id, opts)
      return data
    end

    # Create or update invoice billing address
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @option opts [InvoiceBillingAddress] :body 
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def create_or_update_billing_address_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.create_or_update_billing_address ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.create_or_update_billing_address"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/billing_address".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#create_or_update_billing_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update invoice shipping address
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @option opts [InvoiceShippingAddress] :body 
    # @return [Invoice]
    def create_or_update_shipping_address(id, opts = {})
      data, _status_code, _headers = create_or_update_shipping_address_with_http_info(id, opts)
      return data
    end

    # Create or update invoice shipping address
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @option opts [InvoiceShippingAddress] :body 
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def create_or_update_shipping_address_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.create_or_update_shipping_address ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.create_or_update_shipping_address"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/shipping_address".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#create_or_update_shipping_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete invoice billing address
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def delete_billing_address(id, opts = {})
      data, _status_code, _headers = delete_billing_address_with_http_info(id, opts)
      return data
    end

    # Delete invoice billing address
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def delete_billing_address_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.delete_billing_address ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.delete_billing_address"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/billing_address".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#delete_billing_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete invoice shipping address
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def delete_shipping_address(id, opts = {})
      data, _status_code, _headers = delete_shipping_address_with_http_info(id, opts)
      return data
    end

    # Delete invoice shipping address
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def delete_shipping_address_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.delete_shipping_address ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.delete_shipping_address"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/shipping_address".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#delete_shipping_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detach from subscription
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def detach_from_subscription(id, opts = {})
      data, _status_code, _headers = detach_from_subscription_with_http_info(id, opts)
      return data
    end

    # Detach from subscription
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def detach_from_subscription_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.detach_from_subscription ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.detach_from_subscription"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/detach".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#detach_from_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get invoice
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def get_invoice(id, opts = {})
      data, _status_code, _headers = get_invoice_with_http_info(id, opts)
      return data
    end

    # Get invoice
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def get_invoice_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.get_invoice ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.get_invoice"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#get_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of invoices
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to get (default to 1)
    # @option opts [Integer] :size Page size to use (default to 20)
    # @option opts [String] :search Optional search expression
    # @option opts [String] :sort Optional sorting expression
    # @return [InvoiceSearch]
    def get_invoices(opts = {})
      data, _status_code, _headers = get_invoices_with_http_info(opts)
      return data
    end

    # Get list of invoices
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to get
    # @option opts [Integer] :size Page size to use
    # @option opts [String] :search Optional search expression
    # @option opts [String] :sort Optional sorting expression
    # @return [Array<(InvoiceSearch, Fixnum, Hash)>] InvoiceSearch data, response status code and response headers
    def get_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.get_invoices ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 10000000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling InvoiceApi.get_invoices, must be smaller than or equal to 10000000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling InvoiceApi.get_invoices, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling InvoiceApi.get_invoices, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling InvoiceApi.get_invoices, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/v1/invoice"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceSearch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#get_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manual settle
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @option opts [ManualSettleTransfer] :body 
    # @return [Invoice]
    def manual_settle(id, opts = {})
      data, _status_code, _headers = manual_settle_with_http_info(id, opts)
      return data
    end

    # Manual settle
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @option opts [ManualSettleTransfer] :body 
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def manual_settle_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.manual_settle ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.manual_settle"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/manual_settle".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#manual_settle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reactivate invoice
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def reactivate_invoice(id, opts = {})
      data, _status_code, _headers = reactivate_invoice_with_http_info(id, opts)
      return data
    end

    # Reactivate invoice
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def reactivate_invoice_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.reactivate_invoice ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.reactivate_invoice"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/reactivate".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#reactivate_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Settle
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @option opts [Settle] :body 
    # @return [Invoice]
    def settle(id, opts = {})
      data, _status_code, _headers = settle_with_http_info(id, opts)
      return data
    end

    # Settle
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @option opts [Settle] :body 
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def settle_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.settle ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.settle"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/settle".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#settle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get transaction
    # 
    # @param id Invoice id or handle
    # @param transaction Transaction id
    # @param [Hash] opts the optional parameters
    # @return [Transaction]
    def transaction(id, transaction, opts = {})
      data, _status_code, _headers = transaction_with_http_info(id, transaction, opts)
      return data
    end

    # Get transaction
    # 
    # @param id Invoice id or handle
    # @param transaction Transaction id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Transaction, Fixnum, Hash)>] Transaction data, response status code and response headers
    def transaction_with_http_info(id, transaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.transaction ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.transaction"
      end
      # verify the required parameter 'transaction' is set
      if @api_client.config.client_side_validation && transaction.nil?
        fail ArgumentError, "Missing the required parameter 'transaction' when calling InvoiceApi.transaction"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/transaction/{transaction}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'transaction' + '}', transaction.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Transaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get transaction details
    # 
    # @param id Invoice id or handle
    # @param transaction Transaction id
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def transaction_details(id, transaction, opts = {})
      data, _status_code, _headers = transaction_details_with_http_info(id, transaction, opts)
      return data
    end

    # Get transaction details
    # 
    # @param id Invoice id or handle
    # @param transaction Transaction id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def transaction_details_with_http_info(id, transaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.transaction_details ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.transaction_details"
      end
      # verify the required parameter 'transaction' is set
      if @api_client.config.client_side_validation && transaction.nil?
        fail ArgumentError, "Missing the required parameter 'transaction' when calling InvoiceApi.transaction_details"
      end
      # resource path
      local_var_path = "/v1/invoice/{id}/transaction/{transaction}/details".sub('{' + 'id' + '}', id.to_s).sub('{' + 'transaction' + '}', transaction.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#transaction_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get transaction list
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to get (default to 1)
    # @option opts [Integer] :size Page size to use (default to 20)
    # @option opts [String] :search Optional search expression
    # @option opts [String] :sort Optional sorting expression
    # @return [TransactionSearch]
    def transaction_list(id, opts = {})
      data, _status_code, _headers = transaction_list_with_http_info(id, opts)
      return data
    end

    # Get transaction list
    # 
    # @param id Invoice id or handle
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to get
    # @option opts [Integer] :size Page size to use
    # @option opts [String] :search Optional search expression
    # @option opts [String] :sort Optional sorting expression
    # @return [Array<(TransactionSearch, Fixnum, Hash)>] TransactionSearch data, response status code and response headers
    def transaction_list_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoiceApi.transaction_list ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoiceApi.transaction_list"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 10000000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling InvoiceApi.transaction_list, must be smaller than or equal to 10000000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling InvoiceApi.transaction_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling InvoiceApi.transaction_list, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling InvoiceApi.transaction_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/v1/invoice/{id}/transaction".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionSearch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoiceApi#transaction_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
