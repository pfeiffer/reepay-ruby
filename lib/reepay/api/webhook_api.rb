=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Reepay
  class WebhookApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Disable webhooks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookDisableRequest] :body 
    # @return [Array<Webhook>]
    def disable_webhooks(opts = {})
      data, _status_code, _headers = disable_webhooks_with_http_info(opts)
      return data
    end

    # Disable webhooks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookDisableRequest] :body 
    # @return [Array<(Array<Webhook>, Fixnum, Hash)>] Array<Webhook> data, response status code and response headers
    def disable_webhooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhookApi.disable_webhooks ..."
      end
      # resource path
      local_var_path = "/v1/webhook/disable"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Webhook>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#disable_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get webhooks
    # 
    # @param id Webhook id or event id
    # @param [Hash] opts the optional parameters
    # @return [Array<Webhook>]
    def get_webhook(id, opts = {})
      data, _status_code, _headers = get_webhook_with_http_info(id, opts)
      return data
    end

    # Get webhooks
    # 
    # @param id Webhook id or event id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Webhook>, Fixnum, Hash)>] Array<Webhook> data, response status code and response headers
    def get_webhook_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhookApi.get_webhook ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebhookApi.get_webhook"
      end
      # resource path
      local_var_path = "/v1/webhook/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Webhook>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#get_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get webhook requests
    # 
    # @param id Webhook id
    # @param [Hash] opts the optional parameters
    # @return [Array<WebhookRequest>]
    def get_webhook_requests(id, opts = {})
      data, _status_code, _headers = get_webhook_requests_with_http_info(id, opts)
      return data
    end

    # Get webhook requests
    # 
    # @param id Webhook id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WebhookRequest>, Fixnum, Hash)>] Array<WebhookRequest> data, response status code and response headers
    def get_webhook_requests_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhookApi.get_webhook_requests ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebhookApi.get_webhook_requests"
      end
      # resource path
      local_var_path = "/v1/webhook/{id}/request".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WebhookRequest>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#get_webhook_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of webhooks
    # 
    # @param created_before Get webhooks created before this date, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format. Use last created date as filter for next page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :size Page size. A maximum of 100 is allowed. (default to 100)
    # @option opts [String] :state Optional state to filter on, one of the following: &#x60;pending&#x60;, &#x60;disabled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;
    # @return [Array<Webhook>]
    def get_webhooks(created_before, opts = {})
      data, _status_code, _headers = get_webhooks_with_http_info(created_before, opts)
      return data
    end

    # Get list of webhooks
    # 
    # @param created_before Get webhooks created before this date, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format. Use last created date as filter for next page.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :size Page size. A maximum of 100 is allowed.
    # @option opts [String] :state Optional state to filter on, one of the following: &#x60;pending&#x60;, &#x60;disabled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;
    # @return [Array<(Array<Webhook>, Fixnum, Hash)>] Array<Webhook> data, response status code and response headers
    def get_webhooks_with_http_info(created_before, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhookApi.get_webhooks ..."
      end
      # verify the required parameter 'created_before' is set
      if @api_client.config.client_side_validation && created_before.nil?
        fail ArgumentError, "Missing the required parameter 'created_before' when calling WebhookApi.get_webhooks"
      end
      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling WebhookApi.get_webhooks, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling WebhookApi.get_webhooks, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && opts[:'state'] && !['pending', 'disabled', 'failed', 'completed'].include?(opts[:'state'])
        fail ArgumentError, 'invalid value for "state", must be one of pending, disabled, failed, completed'
      end
      # resource path
      local_var_path = "/v1/webhook"

      # query parameters
      query_params = {}
      query_params[:'created_before'] = created_before
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Webhook>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#get_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Re-send webhooks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookResendRequest] :body 
    # @return [Array<Webhook>]
    def resend_json(opts = {})
      data, _status_code, _headers = resend_json_with_http_info(opts)
      return data
    end

    # Re-send webhooks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookResendRequest] :body 
    # @return [Array<(Array<Webhook>, Fixnum, Hash)>] Array<Webhook> data, response status code and response headers
    def resend_json_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhookApi.resend_json ..."
      end
      # resource path
      local_var_path = "/v1/webhook/resend"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Webhook>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#resend_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update and resend webhooks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookUpdateRequest] :body 
    # @return [Array<Webhook>]
    def update_webhooks(opts = {})
      data, _status_code, _headers = update_webhooks_with_http_info(opts)
      return data
    end

    # Update and resend webhooks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookUpdateRequest] :body 
    # @return [Array<(Array<Webhook>, Fixnum, Hash)>] Array<Webhook> data, response status code and response headers
    def update_webhooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhookApi.update_webhooks ..."
      end
      # resource path
      local_var_path = "/v1/webhook/update"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Webhook>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#update_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
