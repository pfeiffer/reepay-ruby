=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Reepay
  class AccountApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create private key
    # 
    # @param [Hash] opts the optional parameters
    # @return [Key]
    def create_private_key(opts = {})
      data, _status_code, _headers = create_private_key_with_http_info(opts)
      return data
    end

    # Create private key
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Key, Fixnum, Hash)>] Key data, response status code and response headers
    def create_private_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.create_private_key ..."
      end
      # resource path
      local_var_path = "/v1/account/privkey"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Key')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#create_private_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create public key
    # 
    # @param [Hash] opts the optional parameters
    # @return [Key]
    def create_public_key(opts = {})
      data, _status_code, _headers = create_public_key_with_http_info(opts)
      return data
    end

    # Create public key
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Key, Fixnum, Hash)>] Key data, response status code and response headers
    def create_public_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.create_public_key ..."
      end
      # resource path
      local_var_path = "/v1/account/pubkey"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Key')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#create_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Expire private key
    # 
    # @param key Private key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def expire_private_key(key, opts = {})
      expire_private_key_with_http_info(key, opts)
      return nil
    end

    # Expire private key
    # 
    # @param key Private key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def expire_private_key_with_http_info(key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.expire_private_key ..."
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling AccountApi.expire_private_key"
      end
      # resource path
      local_var_path = "/v1/account/privkey/{key}/expire".sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#expire_private_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Expire public key
    # 
    # @param key Public key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def expire_public_key(key, opts = {})
      expire_public_key_with_http_info(key, opts)
      return nil
    end

    # Expire public key
    # 
    # @param key Public key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def expire_public_key_with_http_info(key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.expire_public_key ..."
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling AccountApi.expire_public_key"
      end
      # resource path
      local_var_path = "/v1/account/pubkey/{key}/expire".sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#expire_public_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate new webhook secret
    # 
    # @param [Hash] opts the optional parameters
    # @return [WebhookSettings]
    def generate_webhook_secret(opts = {})
      data, _status_code, _headers = generate_webhook_secret_with_http_info(opts)
      return data
    end

    # Generate new webhook secret
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookSettings, Fixnum, Hash)>] WebhookSettings data, response status code and response headers
    def generate_webhook_secret_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.generate_webhook_secret ..."
      end
      # resource path
      local_var_path = "/v1/account/webhook_settings/secret"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebhookSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#generate_webhook_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account
    # 
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def get_current_account(opts = {})
      data, _status_code, _headers = get_current_account_with_http_info(opts)
      return data
    end

    # Get account
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Fixnum, Hash)>] Account data, response status code and response headers
    def get_current_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.get_current_account ..."
      end
      # resource path
      local_var_path = "/v1/account"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Account')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_current_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get discount settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [DiscountSettings]
    def get_discount_settings(opts = {})
      data, _status_code, _headers = get_discount_settings_with_http_info(opts)
      return data
    end

    # Get discount settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DiscountSettings, Fixnum, Hash)>] DiscountSettings data, response status code and response headers
    def get_discount_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.get_discount_settings ..."
      end
      # resource path
      local_var_path = "/v1/account/discount_settings"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DiscountSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_discount_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mail settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [MailSettings]
    def get_mail_settings(opts = {})
      data, _status_code, _headers = get_mail_settings_with_http_info(opts)
      return data
    end

    # Get mail settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MailSettings, Fixnum, Hash)>] MailSettings data, response status code and response headers
    def get_mail_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.get_mail_settings ..."
      end
      # resource path
      local_var_path = "/v1/account/mail_settings"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MailSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_mail_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of private keys
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Key>]
    def get_private_keys(opts = {})
      data, _status_code, _headers = get_private_keys_with_http_info(opts)
      return data
    end

    # Get list of private keys
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Key>, Fixnum, Hash)>] Array<Key> data, response status code and response headers
    def get_private_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.get_private_keys ..."
      end
      # resource path
      local_var_path = "/v1/account/privkey"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Key>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_private_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of public keys
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Key>]
    def get_public_keys(opts = {})
      data, _status_code, _headers = get_public_keys_with_http_info(opts)
      return data
    end

    # Get list of public keys
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Key>, Fixnum, Hash)>] Array<Key> data, response status code and response headers
    def get_public_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.get_public_keys ..."
      end
      # resource path
      local_var_path = "/v1/account/pubkey"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Key>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_public_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get webhook settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [WebhookSettings]
    def get_webhook_settings(opts = {})
      data, _status_code, _headers = get_webhook_settings_with_http_info(opts)
      return data
    end

    # Get webhook settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookSettings, Fixnum, Hash)>] WebhookSettings data, response status code and response headers
    def get_webhook_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.get_webhook_settings ..."
      end
      # resource path
      local_var_path = "/v1/account/webhook_settings"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebhookSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_webhook_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update account
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateAccount] :body 
    # @return [Account]
    def update_account_json(opts = {})
      data, _status_code, _headers = update_account_json_with_http_info(opts)
      return data
    end

    # Update account
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateAccount] :body 
    # @return [Array<(Account, Fixnum, Hash)>] Account data, response status code and response headers
    def update_account_json_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.update_account_json ..."
      end
      # resource path
      local_var_path = "/v1/account"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Account')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#update_account_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update discount settings
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [DiscountSettings] :body 
    # @return [DiscountSettings]
    def update_discount_settings(opts = {})
      data, _status_code, _headers = update_discount_settings_with_http_info(opts)
      return data
    end

    # Update discount settings
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [DiscountSettings] :body 
    # @return [Array<(DiscountSettings, Fixnum, Hash)>] DiscountSettings data, response status code and response headers
    def update_discount_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.update_discount_settings ..."
      end
      # resource path
      local_var_path = "/v1/account/discount_settings"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DiscountSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#update_discount_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update mail settings
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [MailSettings] :body 
    # @return [MailSettings]
    def update_mail_settings_json(opts = {})
      data, _status_code, _headers = update_mail_settings_json_with_http_info(opts)
      return data
    end

    # Update mail settings
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [MailSettings] :body 
    # @return [Array<(MailSettings, Fixnum, Hash)>] MailSettings data, response status code and response headers
    def update_mail_settings_json_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.update_mail_settings_json ..."
      end
      # resource path
      local_var_path = "/v1/account/mail_settings"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MailSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#update_mail_settings_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update webhook settings
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateWebhookSettings] :body 
    # @return [WebhookSettings]
    def update_webhook_settings_json(opts = {})
      data, _status_code, _headers = update_webhook_settings_json_with_http_info(opts)
      return data
    end

    # Update webhook settings
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateWebhookSettings] :body 
    # @return [Array<(WebhookSettings, Fixnum, Hash)>] WebhookSettings data, response status code and response headers
    def update_webhook_settings_json_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.update_webhook_settings_json ..."
      end
      # resource path
      local_var_path = "/v1/account/webhook_settings"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebhookSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#update_webhook_settings_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
