=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Reepay
  class UserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete user
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user(id, opts = {})
      delete_user_with_http_info(id, opts)
      return nil
    end

    # Delete user
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.delete_user ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.delete_user"
      end
      # resource path
      local_var_path = "/v1/user/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [UserAccount]
    def get_user(id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(id, opts)
      return data
    end

    # Get user
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserAccount, Fixnum, Hash)>] UserAccount data, response status code and response headers
    def get_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.get_user ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_user"
      end
      # resource path
      local_var_path = "/v1/user/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get users
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<UserAccount>]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      return data
    end

    # Get users
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserAccount>, Fixnum, Hash)>] Array<UserAccount> data, response status code and response headers
    def get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.get_users ..."
      end
      # resource path
      local_var_path = "/v1/user"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UserAccount>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invite user
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [InviteUser] :body 
    # @return [UserAccount]
    def invite_user(opts = {})
      data, _status_code, _headers = invite_user_with_http_info(opts)
      return data
    end

    # Invite user
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [InviteUser] :body 
    # @return [Array<(UserAccount, Fixnum, Hash)>] UserAccount data, response status code and response headers
    def invite_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.invite_user ..."
      end
      # resource path
      local_var_path = "/v1/user/invite"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#invite_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accept invite
    # 
    # @param token Invite token
    # @param [Hash] opts the optional parameters
    # @option opts [InviteUserAccept] :body 
    # @return [UserAccount]
    def invite_user_accept(token, opts = {})
      data, _status_code, _headers = invite_user_accept_with_http_info(token, opts)
      return data
    end

    # Accept invite
    # 
    # @param token Invite token
    # @param [Hash] opts the optional parameters
    # @option opts [InviteUserAccept] :body 
    # @return [Array<(UserAccount, Fixnum, Hash)>] UserAccount data, response status code and response headers
    def invite_user_accept_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.invite_user_accept ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UserApi.invite_user_accept"
      end
      # resource path
      local_var_path = "/v1/user/invite/{token}".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#invite_user_accept\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get invite
    # 
    # @param token Invite token
    # @param [Hash] opts the optional parameters
    # @return [UserAccount]
    def invite_user_get(token, opts = {})
      data, _status_code, _headers = invite_user_get_with_http_info(token, opts)
      return data
    end

    # Get invite
    # 
    # @param token Invite token
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserAccount, Fixnum, Hash)>] UserAccount data, response status code and response headers
    def invite_user_get_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.invite_user_get ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UserApi.invite_user_get"
      end
      # resource path
      local_var_path = "/v1/user/invite/{token}".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#invite_user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset password request
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [UserResetRequestPassword] :body 
    # @return [nil]
    def reset_password(opts = {})
      reset_password_with_http_info(opts)
      return nil
    end

    # Reset password request
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [UserResetRequestPassword] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_password_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.reset_password ..."
      end
      # resource path
      local_var_path = "/v1/user/reset_password"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#reset_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset password
    # 
    # @param token Reset password token
    # @param [Hash] opts the optional parameters
    # @option opts [ResetUserPassword] :body 
    # @return [User]
    def reset_password_with_token(token, opts = {})
      data, _status_code, _headers = reset_password_with_token_with_http_info(token, opts)
      return data
    end

    # Reset password
    # 
    # @param token Reset password token
    # @param [Hash] opts the optional parameters
    # @option opts [ResetUserPassword] :body 
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def reset_password_with_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.reset_password_with_token ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UserApi.reset_password_with_token"
      end
      # resource path
      local_var_path = "/v1/user/reset_password/{token}".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#reset_password_with_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user groups
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateUserGroups] :body 
    # @return [UserAccount]
    def update_auth(id, opts = {})
      data, _status_code, _headers = update_auth_with_http_info(id, opts)
      return data
    end

    # Update user groups
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateUserGroups] :body 
    # @return [Array<(UserAccount, Fixnum, Hash)>] UserAccount data, response status code and response headers
    def update_auth_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.update_auth ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.update_auth"
      end
      # resource path
      local_var_path = "/v1/user/{id}/groups".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#update_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change password
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateUserPassword] :body 
    # @return [UserAccount]
    def update_password(id, opts = {})
      data, _status_code, _headers = update_password_with_http_info(id, opts)
      return data
    end

    # Change password
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateUserPassword] :body 
    # @return [Array<(UserAccount, Fixnum, Hash)>] UserAccount data, response status code and response headers
    def update_password_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.update_password ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.update_password"
      end
      # resource path
      local_var_path = "/v1/user/{id}/password".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#update_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateUser] :body 
    # @return [UserAccount]
    def update_user(id, opts = {})
      data, _status_code, _headers = update_user_with_http_info(id, opts)
      return data
    end

    # Update user
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateUser] :body 
    # @return [Array<(UserAccount, Fixnum, Hash)>] UserAccount data, response status code and response headers
    def update_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.update_user ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.update_user"
      end
      # resource path
      local_var_path = "/v1/user/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify email
    # 
    # @param token Verify email token
    # @param [Hash] opts the optional parameters
    # @return [User]
    def verify_email(token, opts = {})
      data, _status_code, _headers = verify_email_with_http_info(token, opts)
      return data
    end

    # Verify email
    # 
    # @param token Verify email token
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def verify_email_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.verify_email ..."
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UserApi.verify_email"
      end
      # resource path
      local_var_path = "/v1/user/verify_email/{token}".sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#verify_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send verification email
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def verify_email_request(id, opts = {})
      verify_email_request_with_http_info(id, opts)
      return nil
    end

    # Send verification email
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def verify_email_request_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.verify_email_request ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.verify_email_request"
      end
      # resource path
      local_var_path = "/v1/user/{id}/verify_email".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#verify_email_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
