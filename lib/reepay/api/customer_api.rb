=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Reepay
  class CustomerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Activate payment method
    # 
    # @param handle Customer handle
    # @param method_id Payment method id
    # @param [Hash] opts the optional parameters
    # @return [PaymentMethods]
    def activate_payment_method(handle, method_id, opts = {})
      data, _status_code, _headers = activate_payment_method_with_http_info(handle, method_id, opts)
      return data
    end

    # Activate payment method
    # 
    # @param handle Customer handle
    # @param method_id Payment method id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentMethods, Fixnum, Hash)>] PaymentMethods data, response status code and response headers
    def activate_payment_method_with_http_info(handle, method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.activate_payment_method ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.activate_payment_method"
      end
      # verify the required parameter 'method_id' is set
      if @api_client.config.client_side_validation && method_id.nil?
        fail ArgumentError, "Missing the required parameter 'method_id' when calling CustomerApi.activate_payment_method"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}/payment_method/{method_id}/activate".sub('{' + 'handle' + '}', handle.to_s).sub('{' + 'method_id' + '}', method_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethods')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#activate_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add card payment method
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @option opts [CardToken] :body 
    # @return [Card]
    def add_card_json(handle, opts = {})
      data, _status_code, _headers = add_card_json_with_http_info(handle, opts)
      return data
    end

    # Add card payment method
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @option opts [CardToken] :body 
    # @return [Array<(Card, Fixnum, Hash)>] Card data, response status code and response headers
    def add_card_json_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.add_card_json ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.add_card_json"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}/payment_method/card".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Card')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#add_card_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create invoice for customer
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomerInvoice] :body 
    # @return [Invoice]
    def create_customer_invoice(handle, opts = {})
      data, _status_code, _headers = create_customer_invoice_with_http_info(handle, opts)
      return data
    end

    # Create invoice for customer
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomerInvoice] :body 
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def create_customer_invoice_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.create_customer_invoice ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.create_customer_invoice"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}/invoice".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#create_customer_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create customer
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomer] :body 
    # @return [Customer]
    def create_customer_json(opts = {})
      data, _status_code, _headers = create_customer_json_with_http_info(opts)
      return data
    end

    # Create customer
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomer] :body 
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def create_customer_json_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.create_customer_json ..."
      end
      # resource path
      local_var_path = "/v1/customer"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#create_customer_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create customer note
    # 
    # @param handle 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomerNote] :body 
    # @return [CustomerNote]
    def create_customer_note_json(handle, opts = {})
      data, _status_code, _headers = create_customer_note_json_with_http_info(handle, opts)
      return data
    end

    # Create customer note
    # 
    # @param handle 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomerNote] :body 
    # @return [Array<(CustomerNote, Fixnum, Hash)>] CustomerNote data, response status code and response headers
    def create_customer_note_json_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.create_customer_note_json ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.create_customer_note_json"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}/note".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomerNote')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#create_customer_note_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete customer
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @return [Customer]
    def delete_customer(handle, opts = {})
      data, _status_code, _headers = delete_customer_with_http_info(handle, opts)
      return data
    end

    # Delete customer
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def delete_customer_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.delete_customer ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.delete_customer"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#delete_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get card
    # 
    # @param handle Customer handle
    # @param id Card id
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def get_card(handle, id, opts = {})
      data, _status_code, _headers = get_card_with_http_info(handle, id, opts)
      return data
    end

    # Get card
    # 
    # @param handle Customer handle
    # @param id Card id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Fixnum, Hash)>] Card data, response status code and response headers
    def get_card_with_http_info(handle, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.get_card ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.get_card"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.get_card"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}/payment_method/card/{id}".sub('{' + 'handle' + '}', handle.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Card')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get gateway card details
    # 
    # @param handle Customer handle
    # @param id Card id
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_card_details(handle, id, opts = {})
      data, _status_code, _headers = get_card_details_with_http_info(handle, id, opts)
      return data
    end

    # Get gateway card details
    # 
    # @param handle Customer handle
    # @param id Card id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_card_details_with_http_info(handle, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.get_card_details ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.get_card_details"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.get_card_details"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}/payment_method/card/{id}/details".sub('{' + 'handle' + '}', handle.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_card_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get customer
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @return [Customer]
    def get_customer(handle, opts = {})
      data, _status_code, _headers = get_customer_with_http_info(handle, opts)
      return data
    end

    # Get customer
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def get_customer_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.get_customer ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.get_customer"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get customer notes
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @return [Array<CustomerNote>]
    def get_customer_notes(handle, opts = {})
      data, _status_code, _headers = get_customer_notes_with_http_info(handle, opts)
      return data
    end

    # Get customer notes
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CustomerNote>, Fixnum, Hash)>] Array<CustomerNote> data, response status code and response headers
    def get_customer_notes_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.get_customer_notes ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.get_customer_notes"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}/note".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CustomerNote>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_customer_notes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get payment methods
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :only_active Get only active (default to false)
    # @return [PaymentMethods]
    def get_customer_payment_methods(handle, opts = {})
      data, _status_code, _headers = get_customer_payment_methods_with_http_info(handle, opts)
      return data
    end

    # Get payment methods
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :only_active Get only active
    # @return [Array<(PaymentMethods, Fixnum, Hash)>] PaymentMethods data, response status code and response headers
    def get_customer_payment_methods_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.get_customer_payment_methods ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.get_customer_payment_methods"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}/payment_method".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}
      query_params[:'only_active'] = opts[:'only_active'] if !opts[:'only_active'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethods')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_customer_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of customers
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to get (default to 1)
    # @option opts [Integer] :size Page size to use (default to 20)
    # @option opts [String] :search Optional search expression
    # @option opts [String] :sort Optional sorting expression
    # @return [CustomerSearch]
    def get_customers(opts = {})
      data, _status_code, _headers = get_customers_with_http_info(opts)
      return data
    end

    # Get list of customers
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to get
    # @option opts [Integer] :size Page size to use
    # @option opts [String] :search Optional search expression
    # @option opts [String] :sort Optional sorting expression
    # @return [Array<(CustomerSearch, Fixnum, Hash)>] CustomerSearch data, response status code and response headers
    def get_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.get_customers ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 10000000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling CustomerApi.get_customers, must be smaller than or equal to 10000000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling CustomerApi.get_customers, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling CustomerApi.get_customers, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling CustomerApi.get_customers, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/v1/customer"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomerSearch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import card payment method
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @option opts [CardImport] :body 
    # @return [Card]
    def import_card_json(handle, opts = {})
      data, _status_code, _headers = import_card_json_with_http_info(handle, opts)
      return data
    end

    # Import card payment method
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @option opts [CardImport] :body 
    # @return [Array<(Card, Fixnum, Hash)>] Card data, response status code and response headers
    def import_card_json_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.import_card_json ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.import_card_json"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}/payment_method/card_import".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Card')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#import_card_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inactivate payment method
    # 
    # @param handle Customer handle
    # @param method_id Payment method id
    # @param [Hash] opts the optional parameters
    # @return [PaymentMethods]
    def inactivate_payment_method(handle, method_id, opts = {})
      data, _status_code, _headers = inactivate_payment_method_with_http_info(handle, method_id, opts)
      return data
    end

    # Inactivate payment method
    # 
    # @param handle Customer handle
    # @param method_id Payment method id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentMethods, Fixnum, Hash)>] PaymentMethods data, response status code and response headers
    def inactivate_payment_method_with_http_info(handle, method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.inactivate_payment_method ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.inactivate_payment_method"
      end
      # verify the required parameter 'method_id' is set
      if @api_client.config.client_side_validation && method_id.nil?
        fail ArgumentError, "Missing the required parameter 'method_id' when calling CustomerApi.inactivate_payment_method"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}/payment_method/{method_id}/inactivate".sub('{' + 'handle' + '}', handle.to_s).sub('{' + 'method_id' + '}', method_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethods')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#inactivate_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reactivate failed card
    # 
    # @param handle Customer handle
    # @param card_id Card id
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def reactivate_card(handle, card_id, opts = {})
      data, _status_code, _headers = reactivate_card_with_http_info(handle, card_id, opts)
      return data
    end

    # Reactivate failed card
    # 
    # @param handle Customer handle
    # @param card_id Card id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Fixnum, Hash)>] Card data, response status code and response headers
    def reactivate_card_with_http_info(handle, card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.reactivate_card ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.reactivate_card"
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CustomerApi.reactivate_card"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}/payment_method/{card_id}/card_reactivate".sub('{' + 'handle' + '}', handle.to_s).sub('{' + 'card_id' + '}', card_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Card')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#reactivate_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update customer
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCustomer] :body 
    # @return [Customer]
    def update_customer_json(handle, opts = {})
      data, _status_code, _headers = update_customer_json_with_http_info(handle, opts)
      return data
    end

    # Update customer
    # 
    # @param handle Customer handle
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCustomer] :body 
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def update_customer_json_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.update_customer_json ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling CustomerApi.update_customer_json"
      end
      # resource path
      local_var_path = "/v1/customer/{handle}".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#update_customer_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
