=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Reepay
  class AuthenticateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # User login
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email User email
    # @option opts [String] :password User password
    # @option opts [String] :organisation Organisation subdomain to login to
    # @option opts [String] :account Account handle or id to login to
    # @return [UserLogin]
    def login(opts = {})
      data, _status_code, _headers = login_with_http_info(opts)
      return data
    end

    # User login
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email User email
    # @option opts [String] :password User password
    # @option opts [String] :organisation Organisation subdomain to login to
    # @option opts [String] :account Account handle or id to login to
    # @return [Array<(UserLogin, Fixnum, Hash)>] UserLogin data, response status code and response headers
    def login_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AuthenticateApi.login ..."
      end
      # resource path
      local_var_path = "/v1/authenticate/login"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["email"] = opts[:'email'] if !opts[:'email'].nil?
      form_params["password"] = opts[:'password'] if !opts[:'password'].nil?
      form_params["organisation"] = opts[:'organisation'] if !opts[:'organisation'].nil?
      form_params["account"] = opts[:'account'] if !opts[:'account'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserLogin')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticateApi#login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Renew user login
    # 
    # @param [Hash] opts the optional parameters
    # @return [UserRenew]
    def renew(opts = {})
      data, _status_code, _headers = renew_with_http_info(opts)
      return data
    end

    # Renew user login
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserRenew, Fixnum, Hash)>] UserRenew data, response status code and response headers
    def renew_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AuthenticateApi.renew ..."
      end
      # resource path
      local_var_path = "/v1/authenticate/renew"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserRenew')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticateApi#renew\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify authentication
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def verify_authentication(opts = {})
      verify_authentication_with_http_info(opts)
      return nil
    end

    # Verify authentication
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def verify_authentication_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AuthenticateApi.verify_authentication ..."
      end
      # resource path
      local_var_path = "/v1/authenticate/verify"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticateApi#verify_authentication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
