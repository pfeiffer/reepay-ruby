=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Reepay
  class ChargeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Cancel charge
    # 
    # @param handle Charge handle
    # @param [Hash] opts the optional parameters
    # @return [Charge]
    def cancel_charge(handle, opts = {})
      data, _status_code, _headers = cancel_charge_with_http_info(handle, opts)
      return data
    end

    # Cancel charge
    # 
    # @param handle Charge handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Charge, Fixnum, Hash)>] Charge data, response status code and response headers
    def cancel_charge_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargeApi.cancel_charge ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling ChargeApi.cancel_charge"
      end
      # resource path
      local_var_path = "/v1/charge/{handle}/cancel".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Charge')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeApi#cancel_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create charge
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCharge] :body 
    # @return [Charge]
    def create_charge(opts = {})
      data, _status_code, _headers = create_charge_with_http_info(opts)
      return data
    end

    # Create charge
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCharge] :body 
    # @return [Array<(Charge, Fixnum, Hash)>] Charge data, response status code and response headers
    def create_charge_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargeApi.create_charge ..."
      end
      # resource path
      local_var_path = "/v1/charge"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Charge')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeApi#create_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get charge
    # 
    # @param handle Charge handle
    # @param [Hash] opts the optional parameters
    # @return [Charge]
    def get_charge(handle, opts = {})
      data, _status_code, _headers = get_charge_with_http_info(handle, opts)
      return data
    end

    # Get charge
    # 
    # @param handle Charge handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Charge, Fixnum, Hash)>] Charge data, response status code and response headers
    def get_charge_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargeApi.get_charge ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling ChargeApi.get_charge"
      end
      # resource path
      local_var_path = "/v1/charge/{handle}".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Charge')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeApi#get_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get charges
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to get (default to 1)
    # @option opts [Integer] :size Page size to use (default to 20)
    # @option opts [String] :search Optional search expression
    # @option opts [String] :sort Optional sorting expression
    # @return [ChargeSearch]
    def get_charges(opts = {})
      data, _status_code, _headers = get_charges_with_http_info(opts)
      return data
    end

    # Get charges
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to get
    # @option opts [Integer] :size Page size to use
    # @option opts [String] :search Optional search expression
    # @option opts [String] :sort Optional sorting expression
    # @return [Array<(ChargeSearch, Fixnum, Hash)>] ChargeSearch data, response status code and response headers
    def get_charges_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargeApi.get_charges ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 10000000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ChargeApi.get_charges, must be smaller than or equal to 10000000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ChargeApi.get_charges, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ChargeApi.get_charges, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ChargeApi.get_charges, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/v1/charge"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChargeSearch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeApi#get_charges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Prepare charge
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [PrepareChargeDto] :body 
    # @return [Charge]
    def prepare_charge(opts = {})
      data, _status_code, _headers = prepare_charge_with_http_info(opts)
      return data
    end

    # Prepare charge
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [PrepareChargeDto] :body 
    # @return [Array<(Charge, Fixnum, Hash)>] Charge data, response status code and response headers
    def prepare_charge_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargeApi.prepare_charge ..."
      end
      # resource path
      local_var_path = "/v1/charge/prepare"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Charge')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeApi#prepare_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Settle charge
    # 
    # @param handle Charge handle
    # @param [Hash] opts the optional parameters
    # @option opts [SettleCharge] :body 
    # @return [Charge]
    def settle_charge(handle, opts = {})
      data, _status_code, _headers = settle_charge_with_http_info(handle, opts)
      return data
    end

    # Settle charge
    # 
    # @param handle Charge handle
    # @param [Hash] opts the optional parameters
    # @option opts [SettleCharge] :body 
    # @return [Array<(Charge, Fixnum, Hash)>] Charge data, response status code and response headers
    def settle_charge_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargeApi.settle_charge ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling ChargeApi.settle_charge"
      end
      # resource path
      local_var_path = "/v1/charge/{handle}/settle".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Charge')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeApi#settle_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
