=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Reepay
  class SubscriptionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Cancel subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [CancelSubscription] :body 
    # @return [Subscription]
    def cancel_subscription(handle, opts = {})
      data, _status_code, _headers = cancel_subscription_with_http_info(handle, opts)
      return data
    end

    # Cancel subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [CancelSubscription] :body 
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def cancel_subscription_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.cancel_subscription ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.cancel_subscription"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/cancel".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#cancel_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change next renewal date
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [ChangeNextPeriodStart] :body 
    # @return [Subscription]
    def change_next_period_start_json(handle, opts = {})
      data, _status_code, _headers = change_next_period_start_json_with_http_info(handle, opts)
      return data
    end

    # Change next renewal date
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [ChangeNextPeriodStart] :body 
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def change_next_period_start_json_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.change_next_period_start_json ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.change_next_period_start_json"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/change_next_period_start".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#change_next_period_start_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [ChangeSubscription] :body 
    # @return [Subscription]
    def change_subscription(handle, opts = {})
      data, _status_code, _headers = change_subscription_with_http_info(handle, opts)
      return data
    end

    # Change subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [ChangeSubscription] :body 
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def change_subscription_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.change_subscription ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.change_subscription"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#change_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add subscription discount
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSubscriptionDiscount] :body 
    # @return [SubscriptionDiscount]
    def create_subscription_discount(handle, opts = {})
      data, _status_code, _headers = create_subscription_discount_with_http_info(handle, opts)
      return data
    end

    # Add subscription discount
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSubscriptionDiscount] :body 
    # @return [Array<(SubscriptionDiscount, Fixnum, Hash)>] SubscriptionDiscount data, response status code and response headers
    def create_subscription_discount_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.create_subscription_discount ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.create_subscription_discount"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/discount".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionDiscount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#create_subscription_discount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create invoice ondemand for subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSubscriptionInvoice] :body 
    # @return [Invoice]
    def create_subscription_invoice(handle, opts = {})
      data, _status_code, _headers = create_subscription_invoice_with_http_info(handle, opts)
      return data
    end

    # Create invoice ondemand for subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSubscriptionInvoice] :body 
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def create_subscription_invoice_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.create_subscription_invoice ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.create_subscription_invoice"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/invoice".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#create_subscription_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create subscription
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSubscription] :body 
    # @return [Subscription]
    def create_subscription_json(opts = {})
      data, _status_code, _headers = create_subscription_json_with_http_info(opts)
      return data
    end

    # Create subscription
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSubscription] :body 
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def create_subscription_json_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.create_subscription_json ..."
      end
      # resource path
      local_var_path = "/v1/subscription"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#create_subscription_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete subscription discount
    # 
    # @param handle Subscription handle
    # @param sd_handle Subscription discount handle
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionDiscount]
    def delete_subscription_discount(handle, sd_handle, opts = {})
      data, _status_code, _headers = delete_subscription_discount_with_http_info(handle, sd_handle, opts)
      return data
    end

    # Delete subscription discount
    # 
    # @param handle Subscription handle
    # @param sd_handle Subscription discount handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionDiscount, Fixnum, Hash)>] SubscriptionDiscount data, response status code and response headers
    def delete_subscription_discount_with_http_info(handle, sd_handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.delete_subscription_discount ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.delete_subscription_discount"
      end
      # verify the required parameter 'sd_handle' is set
      if @api_client.config.client_side_validation && sd_handle.nil?
        fail ArgumentError, "Missing the required parameter 'sd_handle' when calling SubscriptionApi.delete_subscription_discount"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/discount/{sdHandle}".sub('{' + 'handle' + '}', handle.to_s).sub('{' + 'sdHandle' + '}', sd_handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionDiscount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#delete_subscription_discount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Expire subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [ExpireSubscription] :body 
    # @return [Subscription]
    def expire(handle, opts = {})
      data, _status_code, _headers = expire_with_http_info(handle, opts)
      return data
    end

    # Expire subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [ExpireSubscription] :body 
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def expire_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.expire ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.expire"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/expire".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#expire\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @return [Subscription]
    def get_subscription(handle, opts = {})
      data, _status_code, _headers = get_subscription_with_http_info(handle, opts)
      return data
    end

    # Get subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def get_subscription_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.get_subscription ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.get_subscription"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#get_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get subscription add-on
    # 
    # @param handle Subscription handle
    # @param sa_handle Subscription add-on handle
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionAddOn]
    def get_subscription_add_on(handle, sa_handle, opts = {})
      data, _status_code, _headers = get_subscription_add_on_with_http_info(handle, sa_handle, opts)
      return data
    end

    # Get subscription add-on
    # 
    # @param handle Subscription handle
    # @param sa_handle Subscription add-on handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionAddOn, Fixnum, Hash)>] SubscriptionAddOn data, response status code and response headers
    def get_subscription_add_on_with_http_info(handle, sa_handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.get_subscription_add_on ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.get_subscription_add_on"
      end
      # verify the required parameter 'sa_handle' is set
      if @api_client.config.client_side_validation && sa_handle.nil?
        fail ArgumentError, "Missing the required parameter 'sa_handle' when calling SubscriptionApi.get_subscription_add_on"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/add_on/{saHandle}".sub('{' + 'handle' + '}', handle.to_s).sub('{' + 'saHandle' + '}', sa_handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionAddOn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#get_subscription_add_on\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get subscription add-ons
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @return [Array<SubscriptionAddOn>]
    def get_subscription_add_ons(handle, opts = {})
      data, _status_code, _headers = get_subscription_add_ons_with_http_info(handle, opts)
      return data
    end

    # Get subscription add-ons
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SubscriptionAddOn>, Fixnum, Hash)>] Array<SubscriptionAddOn> data, response status code and response headers
    def get_subscription_add_ons_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.get_subscription_add_ons ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.get_subscription_add_ons"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/add_on".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SubscriptionAddOn>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#get_subscription_add_ons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get subscription discount
    # 
    # @param handle Subscription handle
    # @param sd_handle Subscription discount handle
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionDiscount]
    def get_subscription_discount(handle, sd_handle, opts = {})
      data, _status_code, _headers = get_subscription_discount_with_http_info(handle, sd_handle, opts)
      return data
    end

    # Get subscription discount
    # 
    # @param handle Subscription handle
    # @param sd_handle Subscription discount handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionDiscount, Fixnum, Hash)>] SubscriptionDiscount data, response status code and response headers
    def get_subscription_discount_with_http_info(handle, sd_handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.get_subscription_discount ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.get_subscription_discount"
      end
      # verify the required parameter 'sd_handle' is set
      if @api_client.config.client_side_validation && sd_handle.nil?
        fail ArgumentError, "Missing the required parameter 'sd_handle' when calling SubscriptionApi.get_subscription_discount"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/discount/{sdHandle}".sub('{' + 'handle' + '}', handle.to_s).sub('{' + 'sdHandle' + '}', sd_handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionDiscount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#get_subscription_discount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get subscription discounts
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @return [Array<SubscriptionDiscount>]
    def get_subscription_discounts(handle, opts = {})
      data, _status_code, _headers = get_subscription_discounts_with_http_info(handle, opts)
      return data
    end

    # Get subscription discounts
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SubscriptionDiscount>, Fixnum, Hash)>] Array<SubscriptionDiscount> data, response status code and response headers
    def get_subscription_discounts_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.get_subscription_discounts ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.get_subscription_discounts"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/discount".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SubscriptionDiscount>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#get_subscription_discounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get payment methods
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @return [PaymentMethods]
    def get_subscription_payment_methods(handle, opts = {})
      data, _status_code, _headers = get_subscription_payment_methods_with_http_info(handle, opts)
      return data
    end

    # Get payment methods
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentMethods, Fixnum, Hash)>] PaymentMethods data, response status code and response headers
    def get_subscription_payment_methods_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.get_subscription_payment_methods ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.get_subscription_payment_methods"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/payment_method".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethods')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#get_subscription_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the period balance for subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date Optional period date (default now) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;
    # @return [SubscriptionPeriodBalance]
    def get_subscription_period_balance(handle, opts = {})
      data, _status_code, _headers = get_subscription_period_balance_with_http_info(handle, opts)
      return data
    end

    # Get the period balance for subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date Optional period date (default now) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;
    # @return [Array<(SubscriptionPeriodBalance, Fixnum, Hash)>] SubscriptionPeriodBalance data, response status code and response headers
    def get_subscription_period_balance_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.get_subscription_period_balance ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.get_subscription_period_balance"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/period_balance".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionPeriodBalance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#get_subscription_period_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of subscriptions
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to get (default to 1)
    # @option opts [Integer] :size Page size to use (default to 20)
    # @option opts [String] :search Optional search expression
    # @option opts [String] :sort Optional sorting expression
    # @return [SubscriptionSearch]
    def get_subscriptions(opts = {})
      data, _status_code, _headers = get_subscriptions_with_http_info(opts)
      return data
    end

    # Get list of subscriptions
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to get
    # @option opts [Integer] :size Page size to use
    # @option opts [String] :search Optional search expression
    # @option opts [String] :sort Optional sorting expression
    # @return [Array<(SubscriptionSearch, Fixnum, Hash)>] SubscriptionSearch data, response status code and response headers
    def get_subscriptions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.get_subscriptions ..."
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 10000000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SubscriptionApi.get_subscriptions, must be smaller than or equal to 10000000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling SubscriptionApi.get_subscriptions, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling SubscriptionApi.get_subscriptions, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling SubscriptionApi.get_subscriptions, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/v1/subscription"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionSearch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#get_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculate interval amount
    # 
    # @param handle Subscription handle
    # @param from From date on the form yyyy-MM-dd
    # @param to To date on the form yyyy-MM-dd
    # @param [Hash] opts the optional parameters
    # @return [IntervalAmount]
    def interval_amount(handle, from, to, opts = {})
      data, _status_code, _headers = interval_amount_with_http_info(handle, from, to, opts)
      return data
    end

    # Calculate interval amount
    # 
    # @param handle Subscription handle
    # @param from From date on the form yyyy-MM-dd
    # @param to To date on the form yyyy-MM-dd
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntervalAmount, Fixnum, Hash)>] IntervalAmount data, response status code and response headers
    def interval_amount_with_http_info(handle, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.interval_amount ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.interval_amount"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling SubscriptionApi.interval_amount"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling SubscriptionApi.interval_amount"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/interval_amount".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IntervalAmount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#interval_amount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscription on hold
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [OnHoldSubscription] :body 
    # @return [Subscription]
    def on_hold(handle, opts = {})
      data, _status_code, _headers = on_hold_with_http_info(handle, opts)
      return data
    end

    # Subscription on hold
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [OnHoldSubscription] :body 
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def on_hold_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.on_hold ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.on_hold"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/on_hold".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#on_hold\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Preview change subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [ChangeSubscription] :body 
    # @return [ChangedSubscription]
    def preview_change_subscription(handle, opts = {})
      data, _status_code, _headers = preview_change_subscription_with_http_info(handle, opts)
      return data
    end

    # Preview change subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [ChangeSubscription] :body 
    # @return [Array<(ChangedSubscription, Fixnum, Hash)>] ChangedSubscription data, response status code and response headers
    def preview_change_subscription_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.preview_change_subscription ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.preview_change_subscription"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/preview".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChangedSubscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#preview_change_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Preview subscription
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreatePreparedSubscription] :body 
    # @return [PreparedSubscription]
    def preview_subscription(opts = {})
      data, _status_code, _headers = preview_subscription_with_http_info(opts)
      return data
    end

    # Preview subscription
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreatePreparedSubscription] :body 
    # @return [Array<(PreparedSubscription, Fixnum, Hash)>] PreparedSubscription data, response status code and response headers
    def preview_subscription_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.preview_subscription ..."
      end
      # resource path
      local_var_path = "/v1/subscription/preview"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PreparedSubscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#preview_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reactivate subscription on hold
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [ReactivateSubscription] :body 
    # @return [Subscription]
    def reactivate_subscription(handle, opts = {})
      data, _status_code, _headers = reactivate_subscription_with_http_info(handle, opts)
      return data
    end

    # Reactivate subscription on hold
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [ReactivateSubscription] :body 
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def reactivate_subscription_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.reactivate_subscription ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.reactivate_subscription"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/reactivate".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#reactivate_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Redeem coupon code for subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [RedeemCouponCode] :body 
    # @return [CouponRedemption]
    def redeem_coupon_code(handle, opts = {})
      data, _status_code, _headers = redeem_coupon_code_with_http_info(handle, opts)
      return data
    end

    # Redeem coupon code for subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [RedeemCouponCode] :body 
    # @return [Array<(CouponRedemption, Fixnum, Hash)>] CouponRedemption data, response status code and response headers
    def redeem_coupon_code_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.redeem_coupon_code ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.redeem_coupon_code"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/coupon".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CouponRedemption')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#redeem_coupon_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove all payment methods
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @return [PaymentMethods]
    def remove_all_payment_methods(handle, opts = {})
      data, _status_code, _headers = remove_all_payment_methods_with_http_info(handle, opts)
      return data
    end

    # Remove all payment methods
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentMethods, Fixnum, Hash)>] PaymentMethods data, response status code and response headers
    def remove_all_payment_methods_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.remove_all_payment_methods ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.remove_all_payment_methods"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/payment_method".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethods')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#remove_all_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove payment method
    # 
    # @param handle Subscription handle
    # @param method_id Payment method id
    # @param [Hash] opts the optional parameters
    # @return [PaymentMethods]
    def remove_payment_method(handle, method_id, opts = {})
      data, _status_code, _headers = remove_payment_method_with_http_info(handle, method_id, opts)
      return data
    end

    # Remove payment method
    # 
    # @param handle Subscription handle
    # @param method_id Payment method id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentMethods, Fixnum, Hash)>] PaymentMethods data, response status code and response headers
    def remove_payment_method_with_http_info(handle, method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.remove_payment_method ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.remove_payment_method"
      end
      # verify the required parameter 'method_id' is set
      if @api_client.config.client_side_validation && method_id.nil?
        fail ArgumentError, "Missing the required parameter 'method_id' when calling SubscriptionApi.remove_payment_method"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/payment_method/{method_id}".sub('{' + 'handle' + '}', handle.to_s).sub('{' + 'method_id' + '}', method_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethods')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#remove_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set payment method
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [SetPaymentMethod] :body 
    # @return [PaymentMethods]
    def set_payment_method(handle, opts = {})
      data, _status_code, _headers = set_payment_method_with_http_info(handle, opts)
      return data
    end

    # Set payment method
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @option opts [SetPaymentMethod] :body 
    # @return [Array<(PaymentMethods, Fixnum, Hash)>] PaymentMethods data, response status code and response headers
    def set_payment_method_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.set_payment_method ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.set_payment_method"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/payment_method".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethods')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#set_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uncancel subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @return [Subscription]
    def uncancel(handle, opts = {})
      data, _status_code, _headers = uncancel_with_http_info(handle, opts)
      return data
    end

    # Uncancel subscription
    # 
    # @param handle Subscription handle
    # @param [Hash] opts the optional parameters
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def uncancel_with_http_info(handle, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionApi.uncancel ..."
      end
      # verify the required parameter 'handle' is set
      if @api_client.config.client_side_validation && handle.nil?
        fail ArgumentError, "Missing the required parameter 'handle' when calling SubscriptionApi.uncancel"
      end
      # resource path
      local_var_path = "/v1/subscription/{handle}/uncancel".sub('{' + 'handle' + '}', handle.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionApi#uncancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
