=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Reepay
  class AgreementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Activate pending MobilePay subscription agreement by MobilePay agreement id
    # 
    # @param ref MobilePay agreement id
    # @param [Hash] opts the optional parameters
    # @return [GatewayAgreement]
    def activate_mobile_pay_subscription_agreement(ref, opts = {})
      data, _status_code, _headers = activate_mobile_pay_subscription_agreement_with_http_info(ref, opts)
      return data
    end

    # Activate pending MobilePay subscription agreement by MobilePay agreement id
    # 
    # @param ref MobilePay agreement id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayAgreement, Fixnum, Hash)>] GatewayAgreement data, response status code and response headers
    def activate_mobile_pay_subscription_agreement_with_http_info(ref, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.activate_mobile_pay_subscription_agreement ..."
      end
      # verify the required parameter 'ref' is set
      if @api_client.config.client_side_validation && ref.nil?
        fail ArgumentError, "Missing the required parameter 'ref' when calling AgreementApi.activate_mobile_pay_subscription_agreement"
      end
      # resource path
      local_var_path = "/v1/agreement/mobile_pay_subscription/{ref}/activate".sub('{' + 'ref' + '}', ref.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayAgreement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#activate_mobile_pay_subscription_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create card gateway agreement
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCardGatewayAgreement] :body 
    # @return [GatewayAgreement]
    def create_card_gateway_agreement(opts = {})
      data, _status_code, _headers = create_card_gateway_agreement_with_http_info(opts)
      return data
    end

    # Create card gateway agreement
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCardGatewayAgreement] :body 
    # @return [Array<(GatewayAgreement, Fixnum, Hash)>] GatewayAgreement data, response status code and response headers
    def create_card_gateway_agreement_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.create_card_gateway_agreement ..."
      end
      # resource path
      local_var_path = "/v1/agreement/card_gateway"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayAgreement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#create_card_gateway_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create payment gateway agreement
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [PgwAgreement] :body 
    # @return [GatewayAgreement]
    def create_pgw_agreement(opts = {})
      data, _status_code, _headers = create_pgw_agreement_with_http_info(opts)
      return data
    end

    # Create payment gateway agreement
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [PgwAgreement] :body 
    # @return [Array<(GatewayAgreement, Fixnum, Hash)>] GatewayAgreement data, response status code and response headers
    def create_pgw_agreement_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.create_pgw_agreement ..."
      end
      # resource path
      local_var_path = "/v1/agreement/pgw"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayAgreement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#create_pgw_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete gateway agreement
    # 
    # @param id Agreement id
    # @param [Hash] opts the optional parameters
    # @return [GatewayAgreement]
    def delete_gateway_agreement(id, opts = {})
      data, _status_code, _headers = delete_gateway_agreement_with_http_info(id, opts)
      return data
    end

    # Delete gateway agreement
    # 
    # @param id Agreement id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayAgreement, Fixnum, Hash)>] GatewayAgreement data, response status code and response headers
    def delete_gateway_agreement_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.delete_gateway_agreement ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgreementApi.delete_gateway_agreement"
      end
      # resource path
      local_var_path = "/v1/agreement/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayAgreement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#delete_gateway_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable gateway agreement
    # 
    # @param id Agreement id
    # @param [Hash] opts the optional parameters
    # @return [GatewayAgreement]
    def disable_gateway_agreement(id, opts = {})
      data, _status_code, _headers = disable_gateway_agreement_with_http_info(id, opts)
      return data
    end

    # Disable gateway agreement
    # 
    # @param id Agreement id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayAgreement, Fixnum, Hash)>] GatewayAgreement data, response status code and response headers
    def disable_gateway_agreement_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.disable_gateway_agreement ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgreementApi.disable_gateway_agreement"
      end
      # resource path
      local_var_path = "/v1/agreement/{id}/disable".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayAgreement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#disable_gateway_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable gateway agreement
    # 
    # @param id Agreement id
    # @param [Hash] opts the optional parameters
    # @return [GatewayAgreement]
    def enable_gateway_agreement(id, opts = {})
      data, _status_code, _headers = enable_gateway_agreement_with_http_info(id, opts)
      return data
    end

    # Enable gateway agreement
    # 
    # @param id Agreement id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayAgreement, Fixnum, Hash)>] GatewayAgreement data, response status code and response headers
    def enable_gateway_agreement_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.enable_gateway_agreement ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgreementApi.enable_gateway_agreement"
      end
      # resource path
      local_var_path = "/v1/agreement/{id}/enable".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayAgreement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#enable_gateway_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all card gateway agreements
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :only_active Get only active (default to false)
    # @option opts [BOOLEAN] :non_deleted Get only non-deleted (default to false)
    # @return [Array<GatewayAgreement>]
    def get_card_gateway_agreements(opts = {})
      data, _status_code, _headers = get_card_gateway_agreements_with_http_info(opts)
      return data
    end

    # Get all card gateway agreements
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :only_active Get only active
    # @option opts [BOOLEAN] :non_deleted Get only non-deleted
    # @return [Array<(Array<GatewayAgreement>, Fixnum, Hash)>] Array<GatewayAgreement> data, response status code and response headers
    def get_card_gateway_agreements_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.get_card_gateway_agreements ..."
      end
      # resource path
      local_var_path = "/v1/agreement/card_gateway"

      # query parameters
      query_params = {}
      query_params[:'only_active'] = opts[:'only_active'] if !opts[:'only_active'].nil?
      query_params[:'non_deleted'] = opts[:'non_deleted'] if !opts[:'non_deleted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GatewayAgreement>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#get_card_gateway_agreements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get gateway agreement
    # 
    # @param id Agreement id
    # @param [Hash] opts the optional parameters
    # @return [GatewayAgreement]
    def get_gateway_agreement(id, opts = {})
      data, _status_code, _headers = get_gateway_agreement_with_http_info(id, opts)
      return data
    end

    # Get gateway agreement
    # 
    # @param id Agreement id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayAgreement, Fixnum, Hash)>] GatewayAgreement data, response status code and response headers
    def get_gateway_agreement_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.get_gateway_agreement ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgreementApi.get_gateway_agreement"
      end
      # resource path
      local_var_path = "/v1/agreement/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayAgreement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#get_gateway_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all agreements
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :only_active Get only active (default to false)
    # @option opts [BOOLEAN] :non_deleted Get only non-deleted (default to false)
    # @return [Array<GatewayAgreement>]
    def get_gateway_agreements(opts = {})
      data, _status_code, _headers = get_gateway_agreements_with_http_info(opts)
      return data
    end

    # Get all agreements
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :only_active Get only active
    # @option opts [BOOLEAN] :non_deleted Get only non-deleted
    # @return [Array<(Array<GatewayAgreement>, Fixnum, Hash)>] Array<GatewayAgreement> data, response status code and response headers
    def get_gateway_agreements_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.get_gateway_agreements ..."
      end
      # resource path
      local_var_path = "/v1/agreement"

      # query parameters
      query_params = {}
      query_params[:'only_active'] = opts[:'only_active'] if !opts[:'only_active'].nil?
      query_params[:'non_deleted'] = opts[:'non_deleted'] if !opts[:'non_deleted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GatewayAgreement>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#get_gateway_agreements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all mobilepay gateway agreements
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :non_deleted Get only non-deleted (default to false)
    # @return [Array<GatewayAgreement>]
    def get_mobile_pay_agreements(opts = {})
      data, _status_code, _headers = get_mobile_pay_agreements_with_http_info(opts)
      return data
    end

    # Get all mobilepay gateway agreements
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :non_deleted Get only non-deleted
    # @return [Array<(Array<GatewayAgreement>, Fixnum, Hash)>] Array<GatewayAgreement> data, response status code and response headers
    def get_mobile_pay_agreements_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.get_mobile_pay_agreements ..."
      end
      # resource path
      local_var_path = "/v1/agreement/mobile_pay_subscription"

      # query parameters
      query_params = {}
      query_params[:'non_deleted'] = opts[:'non_deleted'] if !opts[:'non_deleted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GatewayAgreement>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#get_mobile_pay_agreements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Prepare MobilePay subscription agreement
    # 
    # @param [Hash] opts the optional parameters
    # @return [MobilePaySubscriptionAgreementPrepareResponse]
    def prepare_mobile_pay_subscription_agreement(opts = {})
      data, _status_code, _headers = prepare_mobile_pay_subscription_agreement_with_http_info(opts)
      return data
    end

    # Prepare MobilePay subscription agreement
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MobilePaySubscriptionAgreementPrepareResponse, Fixnum, Hash)>] MobilePaySubscriptionAgreementPrepareResponse data, response status code and response headers
    def prepare_mobile_pay_subscription_agreement_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.prepare_mobile_pay_subscription_agreement ..."
      end
      # resource path
      local_var_path = "/v1/agreement/mobile_pay_subscription"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MobilePaySubscriptionAgreementPrepareResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#prepare_mobile_pay_subscription_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update card gateway agreement
    # 
    # @param id Agreement id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCardGatewayAgreement] :body 
    # @return [GatewayAgreement]
    def update_card_gateway_agreement(id, opts = {})
      data, _status_code, _headers = update_card_gateway_agreement_with_http_info(id, opts)
      return data
    end

    # Update card gateway agreement
    # 
    # @param id Agreement id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCardGatewayAgreement] :body 
    # @return [Array<(GatewayAgreement, Fixnum, Hash)>] GatewayAgreement data, response status code and response headers
    def update_card_gateway_agreement_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.update_card_gateway_agreement ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgreementApi.update_card_gateway_agreement"
      end
      # resource path
      local_var_path = "/v1/agreement/card_gateway/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayAgreement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#update_card_gateway_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update pgw agreement
    # 
    # @param id Agreement id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdatePgwAgreement] :body 
    # @return [GatewayAgreement]
    def update_pgw_agreement(id, opts = {})
      data, _status_code, _headers = update_pgw_agreement_with_http_info(id, opts)
      return data
    end

    # Update pgw agreement
    # 
    # @param id Agreement id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdatePgwAgreement] :body 
    # @return [Array<(GatewayAgreement, Fixnum, Hash)>] GatewayAgreement data, response status code and response headers
    def update_pgw_agreement_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgreementApi.update_pgw_agreement ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AgreementApi.update_pgw_agreement"
      end
      # resource path
      local_var_path = "/v1/agreement/pgw/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GatewayAgreement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgreementApi#update_pgw_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
