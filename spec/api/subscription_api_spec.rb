=begin
#API

#REST API to manage Reepay resources

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Reepay::SubscriptionApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SubscriptionApi' do
  before do
    # run before each test
    @instance = Reepay::SubscriptionApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SubscriptionApi' do
    it 'should create an instance of SubscriptionApi' do
      expect(@instance).to be_instance_of(Reepay::SubscriptionApi)
    end
  end

  # unit tests for cancel_subscription
  # Cancel subscription
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @option opts [CancelSubscription] :body 
  # @return [Subscription]
  describe 'cancel_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for change_next_period_start_json
  # Change next renewal date
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @option opts [ChangeNextPeriodStart] :body 
  # @return [Subscription]
  describe 'change_next_period_start_json test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for change_subscription
  # Change subscription
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @option opts [ChangeSubscription] :body 
  # @return [Subscription]
  describe 'change_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_subscription_discount
  # Add subscription discount
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @option opts [CreateSubscriptionDiscount] :body 
  # @return [SubscriptionDiscount]
  describe 'create_subscription_discount test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_subscription_invoice
  # Create invoice ondemand for subscription
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @option opts [CreateSubscriptionInvoice] :body 
  # @return [Invoice]
  describe 'create_subscription_invoice test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_subscription_json
  # Create subscription
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [CreateSubscription] :body 
  # @return [Subscription]
  describe 'create_subscription_json test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_subscription_discount
  # Delete subscription discount
  # 
  # @param handle Subscription handle
  # @param sd_handle Subscription discount handle
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionDiscount]
  describe 'delete_subscription_discount test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for expire
  # Expire subscription
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @option opts [ExpireSubscription] :body 
  # @return [Subscription]
  describe 'expire test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription
  # Get subscription
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @return [Subscription]
  describe 'get_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_add_on
  # Get subscription add-on
  # 
  # @param handle Subscription handle
  # @param sa_handle Subscription add-on handle
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionAddOn]
  describe 'get_subscription_add_on test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_add_ons
  # Get subscription add-ons
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @return [Array<SubscriptionAddOn>]
  describe 'get_subscription_add_ons test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_discount
  # Get subscription discount
  # 
  # @param handle Subscription handle
  # @param sd_handle Subscription discount handle
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionDiscount]
  describe 'get_subscription_discount test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_discounts
  # Get subscription discounts
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @return [Array<SubscriptionDiscount>]
  describe 'get_subscription_discounts test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_payment_methods
  # Get payment methods
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @return [PaymentMethods]
  describe 'get_subscription_payment_methods test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_period_balance
  # Get the period balance for subscription
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @option opts [String] :date Optional period date (default now) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;
  # @return [SubscriptionPeriodBalance]
  describe 'get_subscription_period_balance test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscriptions
  # Get list of subscriptions
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number to get
  # @option opts [Integer] :size Page size to use
  # @option opts [String] :search Optional search expression
  # @option opts [String] :sort Optional sorting expression
  # @return [SubscriptionSearch]
  describe 'get_subscriptions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for interval_amount
  # Calculate interval amount
  # 
  # @param handle Subscription handle
  # @param from From date on the form yyyy-MM-dd
  # @param to To date on the form yyyy-MM-dd
  # @param [Hash] opts the optional parameters
  # @return [IntervalAmount]
  describe 'interval_amount test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for on_hold
  # Subscription on hold
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @option opts [OnHoldSubscription] :body 
  # @return [Subscription]
  describe 'on_hold test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for preview_change_subscription
  # Preview change subscription
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @option opts [ChangeSubscription] :body 
  # @return [ChangedSubscription]
  describe 'preview_change_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for preview_subscription
  # Preview subscription
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [CreatePreparedSubscription] :body 
  # @return [PreparedSubscription]
  describe 'preview_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reactivate_subscription
  # Reactivate subscription on hold
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @option opts [ReactivateSubscription] :body 
  # @return [Subscription]
  describe 'reactivate_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for redeem_coupon_code
  # Redeem coupon code for subscription
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @option opts [RedeemCouponCode] :body 
  # @return [CouponRedemption]
  describe 'redeem_coupon_code test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_all_payment_methods
  # Remove all payment methods
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @return [PaymentMethods]
  describe 'remove_all_payment_methods test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_payment_method
  # Remove payment method
  # 
  # @param handle Subscription handle
  # @param method_id Payment method id
  # @param [Hash] opts the optional parameters
  # @return [PaymentMethods]
  describe 'remove_payment_method test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_payment_method
  # Set payment method
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @option opts [SetPaymentMethod] :body 
  # @return [PaymentMethods]
  describe 'set_payment_method test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for uncancel
  # Uncancel subscription
  # 
  # @param handle Subscription handle
  # @param [Hash] opts the optional parameters
  # @return [Subscription]
  describe 'uncancel test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
